//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g 2014-06-25 13:41:08

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


    // The variable 'name' is declared but never used
    #pragma warning disable 168
        

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  PaniciSoftware.FastTemplate.Common 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Literal", "EStart", "MStart", "Prop", "EPass", "MPass", "EQ", "NEQ", "LE", "GE", "LT", "GT", "OR", "AND", "Add", "Minus", "Div", "Mul", "Mod", "RP", "LP", "RBrace", "LBrace", "RBracket", "LBracket", "SignedLong", "Float", "Assign", "StringLiteral", "DynamicString", "UnsignedInteger", "Double", "Hex", "Decimal", "Comma", "Unparsed", "LoopDirective", "If", "ElseIf", "Else", "Loop", "Foreach", "Set", "Parse", "Include", "Keyword", "Root", "End", "True", "False", "As", "To", "Step", "In", "Null", "Break", "Stop", "Not", "Inc", "Dec", "Continue", "UnexpectedChar", "Integer", "Assert", "Pragma", "Block", "ConstDict", "ConstList", "Constant", "Control", "DefaultBlock", "Document", "Empty", "Error", "FnArgs", "Indexer", "Invoke", "LoopArgs", "Nested", "Passthrough", "Plus", "Statement", "TargetedBlock", "Unary"
	};
	public const int EOF=-1;
	public const int Literal=4;
	public const int EStart=5;
	public const int MStart=6;
	public const int Prop=7;
	public const int EPass=8;
	public const int MPass=9;
	public const int EQ=10;
	public const int NEQ=11;
	public const int LE=12;
	public const int GE=13;
	public const int LT=14;
	public const int GT=15;
	public const int OR=16;
	public const int AND=17;
	public const int Add=18;
	public const int Minus=19;
	public const int Div=20;
	public const int Mul=21;
	public const int Mod=22;
	public const int RP=23;
	public const int LP=24;
	public const int RBrace=25;
	public const int LBrace=26;
	public const int RBracket=27;
	public const int LBracket=28;
	public const int SignedLong=29;
	public const int Float=30;
	public const int Assign=31;
	public const int StringLiteral=32;
	public const int DynamicString=33;
	public const int UnsignedInteger=34;
	public const int Double=35;
	public const int Hex=36;
	public const int Decimal=37;
	public const int Comma=38;
	public const int Unparsed=39;
	public const int LoopDirective=40;
	public const int If=41;
	public const int ElseIf=42;
	public const int Else=43;
	public const int Loop=44;
	public const int Foreach=45;
	public const int Set=46;
	public const int Parse=47;
	public const int Include=48;
	public const int Keyword=49;
	public const int Root=50;
	public const int End=51;
	public const int True=52;
	public const int False=53;
	public const int As=54;
	public const int To=55;
	public const int Step=56;
	public const int In=57;
	public const int Null=58;
	public const int Break=59;
	public const int Stop=60;
	public const int Not=61;
	public const int Inc=62;
	public const int Dec=63;
	public const int Continue=64;
	public const int UnexpectedChar=65;
	public const int Integer=66;
	public const int Assert=67;
	public const int Pragma=68;
	public const int Block=69;
	public const int ConstDict=70;
	public const int ConstList=71;
	public const int Constant=72;
	public const int Control=73;
	public const int DefaultBlock=74;
	public const int Document=75;
	public const int Empty=76;
	public const int Error=77;
	public const int FnArgs=78;
	public const int Indexer=79;
	public const int Invoke=80;
	public const int LoopArgs=81;
	public const int Nested=82;
	public const int Passthrough=83;
	public const int Plus=84;
	public const int Statement=85;
	public const int TargetedBlock=86;
	public const int Unary=87;

	public TemplateParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public TemplateParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return TemplateParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g"; } }


	    public ErrorList Errors { get; set; }

	    public override void DisplayRecognitionError(string[] tokenNames, RecognitionException e)
	    {
	        var header = GetErrorHeader(e);
	        var message = GetErrorMessage(e, tokenNames);
	        Errors.ErrorRecognition( header, message );
	        this.EmitErrorMessage( header + " " + message );
	    }

	    public override string GetErrorMessage(RecognitionException e, string[] tokenNames)
	    {
	      string str1 = e.Message;
	      if (e is UnwantedTokenException)
	      {
	        UnwantedTokenException unwantedTokenException = (UnwantedTokenException) e;
	        string str2 = unwantedTokenException.Expecting != -1 ? tokenNames[unwantedTokenException.Expecting] : "EndOfFile";
	        str1 = "extraneous input " + this.GetTokenErrorDisplay(unwantedTokenException.UnexpectedToken) + " expecting " + str2;
	      }
	      else if (e is MissingTokenException)
	      {
	        MissingTokenException missingTokenException = (MissingTokenException) e;
	        str1 = "missing " + (missingTokenException.Expecting != -1 ? tokenNames[missingTokenException.Expecting] : "EndOfFile") + " at " + this.GetTokenErrorDisplay(e.Token);
	      }
	      else if (e is MismatchedTokenException)
	      {
	        MismatchedTokenException mismatchedTokenException = (MismatchedTokenException) e;
	        string str2 = mismatchedTokenException.Expecting != -1 ? tokenNames[mismatchedTokenException.Expecting] : "EndOfFile";
	        str1 = "mismatched input " + this.GetTokenErrorDisplay(e.Token) + " expecting " + str2;
	      }
	      else if (e is MismatchedTreeNodeException)
	      {
	        MismatchedTreeNodeException treeNodeException = (MismatchedTreeNodeException) e;
	        string str2 = treeNodeException.Expecting != -1 ? tokenNames[treeNodeException.Expecting] : "EndOfFile";
	        str1 = "mismatched tree node: " + (treeNodeException.Node != null ? treeNodeException.Node.ToString() ?? string.Empty : string.Empty) + " expecting " + str2;
	      }
	      else if (e is NoViableAltException)
	        str1 = "no viable alternative at input " + this.GetTokenErrorDisplay(e.Token);
	      else if (e is EarlyExitException)
	        str1 = "required (...)+ loop did not match anything at input " + this.GetTokenErrorDisplay(e.Token);
	      else if (e is MismatchedSetException)
	      {
	        MismatchedSetException mismatchedSetException = (MismatchedSetException) e;
	        str1 = string.Concat(new object[4]
	        {
	          (object) "mismatched input ",
	          (object) this.GetTokenErrorDisplay(e.Token),
	          (object) " expecting set ",
	          (object) mismatchedSetException.Expecting
	        });
	      }
	      else if (e is MismatchedNotSetException)
	      {
	        MismatchedNotSetException mismatchedNotSetException = (MismatchedNotSetException) e;
	        str1 = string.Concat(new object[4]
	        {
	          (object) "mismatched input ",
	          (object) this.GetTokenErrorDisplay(e.Token),
	          (object) " expecting set ",
	          (object) mismatchedNotSetException.Expecting
	        });
	      }
	      else if (e is FailedPredicateException)
	      {
	        FailedPredicateException predicateException = (FailedPredicateException) e;
	        str1 = "rule " + predicateException.RuleName + " failed predicate: {" + predicateException.PredicateText + "}?";
	      }
	      return str1;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_document();
	partial void LeaveRule_document();

	// $ANTLR start "document"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:1: public document : ( section )* EOF -> ^( Document ( section )* ) ;
	[GrammarRule("document")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> document()
	{
		EnterRule_document();
		EnterRule("document", 1);
		TraceIn("document", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> section1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_section=new RewriteRuleSubtreeStream(adaptor,"rule section");
		try { DebugEnterRule(GrammarFileName, "document");
		DebugLocation(142, 48);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:9: ( ( section )* EOF -> ^( Document ( section )* ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:11: ( section )* EOF
			{
			DebugLocation(142, 11);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:11: ( section )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>=Literal && LA1_0<=MStart)||(LA1_0>=EPass && LA1_0<=MPass)||LA1_0==Unparsed||LA1_0==If||(LA1_0>=Loop && LA1_0<=Include)||(LA1_0>=Break && LA1_0<=Stop)||LA1_0==Continue||(LA1_0>=Assert && LA1_0<=Pragma)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:11: section
					{
					DebugLocation(142, 11);
					PushFollow(Follow._section_in_document226);
					section1=section();
					PopFollow();

					stream_section.Add(section1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(142, 20);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_document229);  
			stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: section
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 142:24: -> ^( Document ( section )* )
			{
				DebugLocation(142, 27);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:27: ^( Document ( section )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(142, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Document, "Document"), root_1);

				DebugLocation(142, 39);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:142:39: ( section )*
				while ( stream_section.HasNext )
				{
					DebugLocation(142, 39);
					adaptor.AddChild(root_1, stream_section.NextTree());

				}
				stream_section.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("document", 1);
			LeaveRule("document", 1);
			LeaveRule_document();
		}
		DebugLocation(142, 48);
		} finally { DebugExitRule(GrammarFileName, "document"); }
		return retval;

	}
	// $ANTLR end "document"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:1: block : ( section )* -> ^( Block ( section )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 2);
		TraceIn("block", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> section3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_section=new RewriteRuleSubtreeStream(adaptor,"rule section");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(144, 38);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:6: ( ( section )* -> ^( Block ( section )* ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:8: ( section )*
			{
			DebugLocation(144, 8);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:8: ( section )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>=Literal && LA2_0<=MStart)||(LA2_0>=EPass && LA2_0<=MPass)||LA2_0==Unparsed||LA2_0==If||(LA2_0>=Loop && LA2_0<=Include)||(LA2_0>=Break && LA2_0<=Stop)||LA2_0==Continue||(LA2_0>=Assert && LA2_0<=Pragma)))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:8: section
					{
					DebugLocation(144, 8);
					PushFollow(Follow._section_in_block247);
					section3=section();
					PopFollow();

					stream_section.Add(section3.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: section
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 144:17: -> ^( Block ( section )* )
			{
				DebugLocation(144, 20);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:20: ^( Block ( section )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Block, "Block"), root_1);

				DebugLocation(144, 29);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:144:29: ( section )*
				while ( stream_section.HasNext )
				{
					DebugLocation(144, 29);
					adaptor.AddChild(root_1, stream_section.NextTree());

				}
				stream_section.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 2);
			LeaveRule("block", 2);
			LeaveRule_block();
		}
		DebugLocation(144, 38);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_section();
	partial void LeaveRule_section();

	// $ANTLR start "section"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:146:1: section : ( statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) | Literal -> Literal | Unparsed -> Unparsed | control -> ^( Control control ) );
	[GrammarRule("section")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> section()
	{
		EnterRule_section();
		EnterRule("section", 3);
		TraceIn("section", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Literal6 = default(CommonToken);
		CommonToken Unparsed7 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> passthrough5 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> control8 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Literal6_tree = default(CommonTree);
		CommonTree Unparsed7_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Unparsed=new RewriteRuleITokenStream(adaptor,"token Unparsed");
		RewriteRuleITokenStream stream_Literal=new RewriteRuleITokenStream(adaptor,"token Literal");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_control=new RewriteRuleSubtreeStream(adaptor,"rule control");
		RewriteRuleSubtreeStream stream_passthrough=new RewriteRuleSubtreeStream(adaptor,"rule passthrough");
		try { DebugEnterRule(GrammarFileName, "section");
		DebugLocation(146, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:147:5: ( statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) | Literal -> Literal | Unparsed -> Unparsed | control -> ^( Control control ) )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case EStart:
			case MStart:
				{
				alt3 = 1;
				}
				break;
			case EPass:
			case MPass:
				{
				alt3 = 2;
				}
				break;
			case Literal:
				{
				alt3 = 3;
				}
				break;
			case Unparsed:
				{
				alt3 = 4;
				}
				break;
			case If:
			case Loop:
			case Foreach:
			case Set:
			case Parse:
			case Include:
			case Break:
			case Stop:
			case Continue:
			case Assert:
			case Pragma:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:147:7: statement
				{
				DebugLocation(147, 7);
				PushFollow(Follow._statement_in_section271);
				statement4=statement();
				PopFollow();

				stream_statement.Add(statement4.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 147:17: -> ^( Statement statement )
				{
					DebugLocation(147, 20);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:147:20: ^( Statement statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(147, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_1);

					DebugLocation(147, 33);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:148:7: passthrough
				{
				DebugLocation(148, 7);
				PushFollow(Follow._passthrough_in_section289);
				passthrough5=passthrough();
				PopFollow();

				stream_passthrough.Add(passthrough5.Tree);


				{
				// AST REWRITE
				// elements: passthrough
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 148:19: -> ^( Passthrough passthrough )
				{
					DebugLocation(148, 22);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:148:22: ^( Passthrough passthrough )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(148, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Passthrough, "Passthrough"), root_1);

					DebugLocation(148, 37);
					adaptor.AddChild(root_1, stream_passthrough.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:149:7: Literal
				{
				DebugLocation(149, 7);
				Literal6=(CommonToken)Match(input,Literal,Follow._Literal_in_section307);  
				stream_Literal.Add(Literal6);



				{
				// AST REWRITE
				// elements: Literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 149:15: -> Literal
				{
					DebugLocation(149, 18);
					adaptor.AddChild(root_0, stream_Literal.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:150:7: Unparsed
				{
				DebugLocation(150, 7);
				Unparsed7=(CommonToken)Match(input,Unparsed,Follow._Unparsed_in_section319);  
				stream_Unparsed.Add(Unparsed7);



				{
				// AST REWRITE
				// elements: Unparsed
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:16: -> Unparsed
				{
					DebugLocation(150, 19);
					adaptor.AddChild(root_0, stream_Unparsed.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:151:7: control
				{
				DebugLocation(151, 7);
				PushFollow(Follow._control_in_section331);
				control8=control();
				PopFollow();

				stream_control.Add(control8.Tree);


				{
				// AST REWRITE
				// elements: control
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:15: -> ^( Control control )
				{
					DebugLocation(151, 18);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:151:18: ^( Control control )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 21);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Control, "Control"), root_1);

					DebugLocation(151, 29);
					adaptor.AddChild(root_1, stream_control.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("section", 3);
			LeaveRule("section", 3);
			LeaveRule_section();
		}
		DebugLocation(152, 4);
		} finally { DebugExitRule(GrammarFileName, "section"); }
		return retval;

	}
	// $ANTLR end "section"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:154:1: statement : ( EStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* ) -> ^( EStart Root ( sSection )* ) | MStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* ) -> ^( MStart Root ( sSection )* ) );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 4);
		TraceIn("statement", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EStart9 = default(CommonToken);
		CommonToken LBrace10 = default(CommonToken);
		CommonToken Root11 = default(CommonToken);
		CommonToken RBrace13 = default(CommonToken);
		CommonToken Root14 = default(CommonToken);
		CommonToken MStart16 = default(CommonToken);
		CommonToken LBrace17 = default(CommonToken);
		CommonToken Root18 = default(CommonToken);
		CommonToken RBrace20 = default(CommonToken);
		CommonToken Root21 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sSection12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sSection15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sSection19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sSection22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EStart9_tree = default(CommonTree);
		CommonTree LBrace10_tree = default(CommonTree);
		CommonTree Root11_tree = default(CommonTree);
		CommonTree RBrace13_tree = default(CommonTree);
		CommonTree Root14_tree = default(CommonTree);
		CommonTree MStart16_tree = default(CommonTree);
		CommonTree LBrace17_tree = default(CommonTree);
		CommonTree Root18_tree = default(CommonTree);
		CommonTree RBrace20_tree = default(CommonTree);
		CommonTree Root21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MStart=new RewriteRuleITokenStream(adaptor,"token MStart");
		RewriteRuleITokenStream stream_LBrace=new RewriteRuleITokenStream(adaptor,"token LBrace");
		RewriteRuleITokenStream stream_Root=new RewriteRuleITokenStream(adaptor,"token Root");
		RewriteRuleITokenStream stream_EStart=new RewriteRuleITokenStream(adaptor,"token EStart");
		RewriteRuleITokenStream stream_RBrace=new RewriteRuleITokenStream(adaptor,"token RBrace");
		RewriteRuleSubtreeStream stream_sSection=new RewriteRuleSubtreeStream(adaptor,"rule sSection");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(154, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:5: ( EStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* ) -> ^( EStart Root ( sSection )* ) | MStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* ) -> ^( MStart Root ( sSection )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==EStart))
			{
				alt10 = 1;
			}
			else if ((LA10_0==MStart))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:7: EStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* )
				{
				DebugLocation(155, 7);
				EStart9=(CommonToken)Match(input,EStart,Follow._EStart_in_statement358);  
				stream_EStart.Add(EStart9);

				DebugLocation(155, 14);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:14: ( LBrace Root ( sSection )* RBrace | Root ( sSection )* )
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==LBrace))
				{
					alt6 = 1;
				}
				else if ((LA6_0==Root))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:16: LBrace Root ( sSection )* RBrace
					{
					DebugLocation(155, 16);
					LBrace10=(CommonToken)Match(input,LBrace,Follow._LBrace_in_statement362);  
					stream_LBrace.Add(LBrace10);

					DebugLocation(155, 23);
					Root11=(CommonToken)Match(input,Root,Follow._Root_in_statement364);  
					stream_Root.Add(Root11);

					DebugLocation(155, 28);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:28: ( sSection )*
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_0 = input.LA(1);

						if ((LA4_0==Prop||LA4_0==LP||LA4_0==LBracket))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch ( alt4 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:28: sSection
							{
							DebugLocation(155, 28);
							PushFollow(Follow._sSection_in_statement366);
							sSection12=sSection();
							PopFollow();

							stream_sSection.Add(sSection12.Tree);

							}
							break;

						default:
							goto loop4;
						}
					}

					loop4:
						;

					} finally { DebugExitSubRule(4); }

					DebugLocation(155, 38);
					RBrace13=(CommonToken)Match(input,RBrace,Follow._RBrace_in_statement369);  
					stream_RBrace.Add(RBrace13);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:47: Root ( sSection )*
					{
					DebugLocation(155, 47);
					Root14=(CommonToken)Match(input,Root,Follow._Root_in_statement373);  
					stream_Root.Add(Root14);

					DebugLocation(155, 52);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:52: ( sSection )*
					try { DebugEnterSubRule(5);
					while (true)
					{
						int alt5=2;
						try { DebugEnterDecision(5, false);
						int LA5_0 = input.LA(1);

						if ((LA5_0==Prop||LA5_0==LP||LA5_0==LBracket))
						{
							alt5 = 1;
						}


						} finally { DebugExitDecision(5); }
						switch ( alt5 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:52: sSection
							{
							DebugLocation(155, 52);
							PushFollow(Follow._sSection_in_statement375);
							sSection15=sSection();
							PopFollow();

							stream_sSection.Add(sSection15.Tree);

							}
							break;

						default:
							goto loop5;
						}
					}

					loop5:
						;

					} finally { DebugExitSubRule(5); }


					}
					break;

				}
				} finally { DebugExitSubRule(6); }



				{
				// AST REWRITE
				// elements: sSection, EStart, Root
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 155:64: -> ^( EStart Root ( sSection )* )
				{
					DebugLocation(155, 67);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:67: ^( EStart Root ( sSection )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(155, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_EStart.NextNode(), root_1);

					DebugLocation(155, 77);
					adaptor.AddChild(root_1, stream_Root.NextNode());
					DebugLocation(155, 82);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:155:82: ( sSection )*
					while ( stream_sSection.HasNext )
					{
						DebugLocation(155, 82);
						adaptor.AddChild(root_1, stream_sSection.NextTree());

					}
					stream_sSection.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:7: MStart ( LBrace Root ( sSection )* RBrace | Root ( sSection )* )
				{
				DebugLocation(156, 7);
				MStart16=(CommonToken)Match(input,MStart,Follow._MStart_in_statement399);  
				stream_MStart.Add(MStart16);

				DebugLocation(156, 14);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:14: ( LBrace Root ( sSection )* RBrace | Root ( sSection )* )
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==LBrace))
				{
					alt9 = 1;
				}
				else if ((LA9_0==Root))
				{
					alt9 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:16: LBrace Root ( sSection )* RBrace
					{
					DebugLocation(156, 16);
					LBrace17=(CommonToken)Match(input,LBrace,Follow._LBrace_in_statement403);  
					stream_LBrace.Add(LBrace17);

					DebugLocation(156, 23);
					Root18=(CommonToken)Match(input,Root,Follow._Root_in_statement405);  
					stream_Root.Add(Root18);

					DebugLocation(156, 28);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:28: ( sSection )*
					try { DebugEnterSubRule(7);
					while (true)
					{
						int alt7=2;
						try { DebugEnterDecision(7, false);
						int LA7_0 = input.LA(1);

						if ((LA7_0==Prop||LA7_0==LP||LA7_0==LBracket))
						{
							alt7 = 1;
						}


						} finally { DebugExitDecision(7); }
						switch ( alt7 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:28: sSection
							{
							DebugLocation(156, 28);
							PushFollow(Follow._sSection_in_statement407);
							sSection19=sSection();
							PopFollow();

							stream_sSection.Add(sSection19.Tree);

							}
							break;

						default:
							goto loop7;
						}
					}

					loop7:
						;

					} finally { DebugExitSubRule(7); }

					DebugLocation(156, 38);
					RBrace20=(CommonToken)Match(input,RBrace,Follow._RBrace_in_statement410);  
					stream_RBrace.Add(RBrace20);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:47: Root ( sSection )*
					{
					DebugLocation(156, 47);
					Root21=(CommonToken)Match(input,Root,Follow._Root_in_statement414);  
					stream_Root.Add(Root21);

					DebugLocation(156, 52);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:52: ( sSection )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==Prop||LA8_0==LP||LA8_0==LBracket))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:52: sSection
							{
							DebugLocation(156, 52);
							PushFollow(Follow._sSection_in_statement416);
							sSection22=sSection();
							PopFollow();

							stream_sSection.Add(sSection22.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: sSection, MStart, Root
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:64: -> ^( MStart Root ( sSection )* )
				{
					DebugLocation(156, 67);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:67: ^( MStart Root ( sSection )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_MStart.NextNode(), root_1);

					DebugLocation(156, 77);
					adaptor.AddChild(root_1, stream_Root.NextNode());
					DebugLocation(156, 82);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:156:82: ( sSection )*
					while ( stream_sSection.HasNext )
					{
						DebugLocation(156, 82);
						adaptor.AddChild(root_1, stream_sSection.NextTree());

					}
					stream_sSection.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 4);
			LeaveRule("statement", 4);
			LeaveRule_statement();
		}
		DebugLocation(157, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_passthrough();
	partial void LeaveRule_passthrough();

	// $ANTLR start "passthrough"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:159:1: passthrough : ( EPass ( argument_expression_list )? RP -> ^( EPass ( argument_expression_list )? ) | MPass ( argument_expression_list )? RP -> ^( MPass ( argument_expression_list )? ) );
	[GrammarRule("passthrough")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> passthrough()
	{
		EnterRule_passthrough();
		EnterRule("passthrough", 5);
		TraceIn("passthrough", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EPass23 = default(CommonToken);
		CommonToken RP25 = default(CommonToken);
		CommonToken MPass26 = default(CommonToken);
		CommonToken RP28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list24 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EPass23_tree = default(CommonTree);
		CommonTree RP25_tree = default(CommonTree);
		CommonTree MPass26_tree = default(CommonTree);
		CommonTree RP28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MPass=new RewriteRuleITokenStream(adaptor,"token MPass");
		RewriteRuleITokenStream stream_EPass=new RewriteRuleITokenStream(adaptor,"token EPass");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
		try { DebugEnterRule(GrammarFileName, "passthrough");
		DebugLocation(159, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:5: ( EPass ( argument_expression_list )? RP -> ^( EPass ( argument_expression_list )? ) | MPass ( argument_expression_list )? RP -> ^( MPass ( argument_expression_list )? ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==EPass))
			{
				alt13 = 1;
			}
			else if ((LA13_0==MPass))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:7: EPass ( argument_expression_list )? RP
				{
				DebugLocation(160, 7);
				EPass23=(CommonToken)Match(input,EPass,Follow._EPass_in_passthrough449);  
				stream_EPass.Add(EPass23);

				DebugLocation(160, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:13: ( argument_expression_list )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>=EStart && LA11_0<=MStart)||(LA11_0>=EPass && LA11_0<=MPass)||LA11_0==Minus||LA11_0==LP||LA11_0==LBrace||(LA11_0>=LBracket && LA11_0<=SignedLong)||(LA11_0>=StringLiteral && LA11_0<=Decimal)||(LA11_0>=True && LA11_0<=False)||LA11_0==Null||LA11_0==Not||LA11_0==Integer||LA11_0==Plus))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:13: argument_expression_list
					{
					DebugLocation(160, 13);
					PushFollow(Follow._argument_expression_list_in_passthrough451);
					argument_expression_list24=argument_expression_list();
					PopFollow();

					stream_argument_expression_list.Add(argument_expression_list24.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(160, 39);
				RP25=(CommonToken)Match(input,RP,Follow._RP_in_passthrough454);  
				stream_RP.Add(RP25);



				{
				// AST REWRITE
				// elements: argument_expression_list, EPass
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 160:42: -> ^( EPass ( argument_expression_list )? )
				{
					DebugLocation(160, 45);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:45: ^( EPass ( argument_expression_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(160, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_EPass.NextNode(), root_1);

					DebugLocation(160, 54);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:160:54: ( argument_expression_list )?
					if (stream_argument_expression_list.HasNext)
					{
						DebugLocation(160, 54);
						adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

					}
					stream_argument_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:161:7: MPass ( argument_expression_list )? RP
				{
				DebugLocation(161, 7);
				MPass26=(CommonToken)Match(input,MPass,Follow._MPass_in_passthrough473);  
				stream_MPass.Add(MPass26);

				DebugLocation(161, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:161:13: ( argument_expression_list )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>=EStart && LA12_0<=MStart)||(LA12_0>=EPass && LA12_0<=MPass)||LA12_0==Minus||LA12_0==LP||LA12_0==LBrace||(LA12_0>=LBracket && LA12_0<=SignedLong)||(LA12_0>=StringLiteral && LA12_0<=Decimal)||(LA12_0>=True && LA12_0<=False)||LA12_0==Null||LA12_0==Not||LA12_0==Integer||LA12_0==Plus))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:161:13: argument_expression_list
					{
					DebugLocation(161, 13);
					PushFollow(Follow._argument_expression_list_in_passthrough475);
					argument_expression_list27=argument_expression_list();
					PopFollow();

					stream_argument_expression_list.Add(argument_expression_list27.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(161, 39);
				RP28=(CommonToken)Match(input,RP,Follow._RP_in_passthrough478);  
				stream_RP.Add(RP28);



				{
				// AST REWRITE
				// elements: argument_expression_list, MPass
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:42: -> ^( MPass ( argument_expression_list )? )
				{
					DebugLocation(161, 45);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:161:45: ^( MPass ( argument_expression_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(161, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_MPass.NextNode(), root_1);

					DebugLocation(161, 54);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:161:54: ( argument_expression_list )?
					if (stream_argument_expression_list.HasNext)
					{
						DebugLocation(161, 54);
						adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

					}
					stream_argument_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("passthrough", 5);
			LeaveRule("passthrough", 5);
			LeaveRule_passthrough();
		}
		DebugLocation(162, 4);
		} finally { DebugExitRule(GrammarFileName, "passthrough"); }
		return retval;

	}
	// $ANTLR end "passthrough"

	partial void EnterRule_sSection();
	partial void LeaveRule_sSection();

	// $ANTLR start "sSection"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:164:1: sSection : ( Prop -> Prop | LP ( argument_expression_list )? RP -> ^( Invoke ( argument_expression_list )? ) | LBracket ( argument_expression_list )? RBracket -> ^( Indexer ( argument_expression_list )? ) );
	[GrammarRule("sSection")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sSection()
	{
		EnterRule_sSection();
		EnterRule("sSection", 6);
		TraceIn("sSection", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Prop29 = default(CommonToken);
		CommonToken LP30 = default(CommonToken);
		CommonToken RP32 = default(CommonToken);
		CommonToken LBracket33 = default(CommonToken);
		CommonToken RBracket35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Prop29_tree = default(CommonTree);
		CommonTree LP30_tree = default(CommonTree);
		CommonTree RP32_tree = default(CommonTree);
		CommonTree LBracket33_tree = default(CommonTree);
		CommonTree RBracket35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBracket=new RewriteRuleITokenStream(adaptor,"token RBracket");
		RewriteRuleITokenStream stream_Prop=new RewriteRuleITokenStream(adaptor,"token Prop");
		RewriteRuleITokenStream stream_LBracket=new RewriteRuleITokenStream(adaptor,"token LBracket");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
		try { DebugEnterRule(GrammarFileName, "sSection");
		DebugLocation(164, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:165:5: ( Prop -> Prop | LP ( argument_expression_list )? RP -> ^( Invoke ( argument_expression_list )? ) | LBracket ( argument_expression_list )? RBracket -> ^( Indexer ( argument_expression_list )? ) )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case Prop:
				{
				alt16 = 1;
				}
				break;
			case LP:
				{
				alt16 = 2;
				}
				break;
			case LBracket:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:165:7: Prop
				{
				DebugLocation(165, 7);
				Prop29=(CommonToken)Match(input,Prop,Follow._Prop_in_sSection506);  
				stream_Prop.Add(Prop29);



				{
				// AST REWRITE
				// elements: Prop
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 165:12: -> Prop
				{
					DebugLocation(165, 15);
					adaptor.AddChild(root_0, stream_Prop.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:166:7: LP ( argument_expression_list )? RP
				{
				DebugLocation(166, 7);
				LP30=(CommonToken)Match(input,LP,Follow._LP_in_sSection518);  
				stream_LP.Add(LP30);

				DebugLocation(166, 10);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:166:10: ( argument_expression_list )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if (((LA14_0>=EStart && LA14_0<=MStart)||(LA14_0>=EPass && LA14_0<=MPass)||LA14_0==Minus||LA14_0==LP||LA14_0==LBrace||(LA14_0>=LBracket && LA14_0<=SignedLong)||(LA14_0>=StringLiteral && LA14_0<=Decimal)||(LA14_0>=True && LA14_0<=False)||LA14_0==Null||LA14_0==Not||LA14_0==Integer||LA14_0==Plus))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:166:10: argument_expression_list
					{
					DebugLocation(166, 10);
					PushFollow(Follow._argument_expression_list_in_sSection520);
					argument_expression_list31=argument_expression_list();
					PopFollow();

					stream_argument_expression_list.Add(argument_expression_list31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(166, 36);
				RP32=(CommonToken)Match(input,RP,Follow._RP_in_sSection523);  
				stream_RP.Add(RP32);



				{
				// AST REWRITE
				// elements: argument_expression_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 166:39: -> ^( Invoke ( argument_expression_list )? )
				{
					DebugLocation(166, 42);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:166:42: ^( Invoke ( argument_expression_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(166, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Invoke, "Invoke"), root_1);

					DebugLocation(166, 52);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:166:52: ( argument_expression_list )?
					if (stream_argument_expression_list.HasNext)
					{
						DebugLocation(166, 52);
						adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

					}
					stream_argument_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:167:7: LBracket ( argument_expression_list )? RBracket
				{
				DebugLocation(167, 7);
				LBracket33=(CommonToken)Match(input,LBracket,Follow._LBracket_in_sSection542);  
				stream_LBracket.Add(LBracket33);

				DebugLocation(167, 16);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:167:16: ( argument_expression_list )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if (((LA15_0>=EStart && LA15_0<=MStart)||(LA15_0>=EPass && LA15_0<=MPass)||LA15_0==Minus||LA15_0==LP||LA15_0==LBrace||(LA15_0>=LBracket && LA15_0<=SignedLong)||(LA15_0>=StringLiteral && LA15_0<=Decimal)||(LA15_0>=True && LA15_0<=False)||LA15_0==Null||LA15_0==Not||LA15_0==Integer||LA15_0==Plus))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:167:16: argument_expression_list
					{
					DebugLocation(167, 16);
					PushFollow(Follow._argument_expression_list_in_sSection544);
					argument_expression_list34=argument_expression_list();
					PopFollow();

					stream_argument_expression_list.Add(argument_expression_list34.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(167, 42);
				RBracket35=(CommonToken)Match(input,RBracket,Follow._RBracket_in_sSection547);  
				stream_RBracket.Add(RBracket35);



				{
				// AST REWRITE
				// elements: argument_expression_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:51: -> ^( Indexer ( argument_expression_list )? )
				{
					DebugLocation(167, 54);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:167:54: ^( Indexer ( argument_expression_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 57);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Indexer, "Indexer"), root_1);

					DebugLocation(167, 65);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:167:65: ( argument_expression_list )?
					if (stream_argument_expression_list.HasNext)
					{
						DebugLocation(167, 65);
						adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

					}
					stream_argument_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sSection", 6);
			LeaveRule("sSection", 6);
			LeaveRule_sSection();
		}
		DebugLocation(168, 4);
		} finally { DebugExitRule(GrammarFileName, "sSection"); }
		return retval;

	}
	// $ANTLR end "sSection"

	partial void EnterRule_control();
	partial void LeaveRule_control();

	// $ANTLR start "control"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:170:1: control : ( loop | assert | pragma | foreach | set | include | parse | if | Stop | Break | Continue );
	[GrammarRule("control")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> control()
	{
		EnterRule_control();
		EnterRule("control", 7);
		TraceIn("control", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Stop44 = default(CommonToken);
		CommonToken Break45 = default(CommonToken);
		CommonToken Continue46 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> loop36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assert37 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> pragma38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> foreach39 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> set40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> include41 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parse42 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> if43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Stop44_tree = default(CommonTree);
		CommonTree Break45_tree = default(CommonTree);
		CommonTree Continue46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "control");
		DebugLocation(170, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:171:5: ( loop | assert | pragma | foreach | set | include | parse | if | Stop | Break | Continue )
			int alt17=11;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case Loop:
				{
				alt17 = 1;
				}
				break;
			case Assert:
				{
				alt17 = 2;
				}
				break;
			case Pragma:
				{
				alt17 = 3;
				}
				break;
			case Foreach:
				{
				alt17 = 4;
				}
				break;
			case Set:
				{
				alt17 = 5;
				}
				break;
			case Include:
				{
				alt17 = 6;
				}
				break;
			case Parse:
				{
				alt17 = 7;
				}
				break;
			case If:
				{
				alt17 = 8;
				}
				break;
			case Stop:
				{
				alt17 = 9;
				}
				break;
			case Break:
				{
				alt17 = 10;
				}
				break;
			case Continue:
				{
				alt17 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:171:7: loop
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(171, 7);
				PushFollow(Follow._loop_in_control575);
				loop36=loop();
				PopFollow();

				adaptor.AddChild(root_0, loop36.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:172:7: assert
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(172, 7);
				PushFollow(Follow._assert_in_control583);
				assert37=assert();
				PopFollow();

				adaptor.AddChild(root_0, assert37.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:173:7: pragma
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 7);
				PushFollow(Follow._pragma_in_control591);
				pragma38=pragma();
				PopFollow();

				adaptor.AddChild(root_0, pragma38.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:174:7: foreach
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 7);
				PushFollow(Follow._foreach_in_control599);
				foreach39=@foreach();
				PopFollow();

				adaptor.AddChild(root_0, foreach39.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:175:7: set
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 7);
				PushFollow(Follow._set_in_control607);
				set40=set();
				PopFollow();

				adaptor.AddChild(root_0, set40.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:176:7: include
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 7);
				PushFollow(Follow._include_in_control615);
				include41=include();
				PopFollow();

				adaptor.AddChild(root_0, include41.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:177:7: parse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 7);
				PushFollow(Follow._parse_in_control623);
				parse42=parse();
				PopFollow();

				adaptor.AddChild(root_0, parse42.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:178:7: if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 7);
				PushFollow(Follow._if_in_control631);
				if43=@if();
				PopFollow();

				adaptor.AddChild(root_0, if43.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:179:7: Stop
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 7);
				Stop44=(CommonToken)Match(input,Stop,Follow._Stop_in_control639); 
				Stop44_tree = (CommonTree)adaptor.Create(Stop44);
				adaptor.AddChild(root_0, Stop44_tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:180:7: Break
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 7);
				Break45=(CommonToken)Match(input,Break,Follow._Break_in_control647); 
				Break45_tree = (CommonTree)adaptor.Create(Break45);
				adaptor.AddChild(root_0, Break45_tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:181:7: Continue
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 7);
				Continue46=(CommonToken)Match(input,Continue,Follow._Continue_in_control655); 
				Continue46_tree = (CommonTree)adaptor.Create(Continue46);
				adaptor.AddChild(root_0, Continue46_tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("control", 7);
			LeaveRule("control", 7);
			LeaveRule_control();
		}
		DebugLocation(182, 4);
		} finally { DebugExitRule(GrammarFileName, "control"); }
		return retval;

	}
	// $ANTLR end "control"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:184:1: constant : ( StringLiteral | SignedLong | Integer | UnsignedInteger | Double | Decimal | Hex | True | False | Null | list -> ^( ConstList list ) | dict -> ^( ConstDict dict ) );
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 8);
		TraceIn("constant", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken StringLiteral47 = default(CommonToken);
		CommonToken SignedLong48 = default(CommonToken);
		CommonToken Integer49 = default(CommonToken);
		CommonToken UnsignedInteger50 = default(CommonToken);
		CommonToken Double51 = default(CommonToken);
		CommonToken Decimal52 = default(CommonToken);
		CommonToken Hex53 = default(CommonToken);
		CommonToken True54 = default(CommonToken);
		CommonToken False55 = default(CommonToken);
		CommonToken Null56 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> list57 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> dict58 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree StringLiteral47_tree = default(CommonTree);
		CommonTree SignedLong48_tree = default(CommonTree);
		CommonTree Integer49_tree = default(CommonTree);
		CommonTree UnsignedInteger50_tree = default(CommonTree);
		CommonTree Double51_tree = default(CommonTree);
		CommonTree Decimal52_tree = default(CommonTree);
		CommonTree Hex53_tree = default(CommonTree);
		CommonTree True54_tree = default(CommonTree);
		CommonTree False55_tree = default(CommonTree);
		CommonTree Null56_tree = default(CommonTree);
		RewriteRuleSubtreeStream stream_dict=new RewriteRuleSubtreeStream(adaptor,"rule dict");
		RewriteRuleSubtreeStream stream_list=new RewriteRuleSubtreeStream(adaptor,"rule list");
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(184, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:185:5: ( StringLiteral | SignedLong | Integer | UnsignedInteger | Double | Decimal | Hex | True | False | Null | list -> ^( ConstList list ) | dict -> ^( ConstDict dict ) )
			int alt18=12;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case StringLiteral:
				{
				alt18 = 1;
				}
				break;
			case SignedLong:
				{
				alt18 = 2;
				}
				break;
			case Integer:
				{
				alt18 = 3;
				}
				break;
			case UnsignedInteger:
				{
				alt18 = 4;
				}
				break;
			case Double:
				{
				alt18 = 5;
				}
				break;
			case Decimal:
				{
				alt18 = 6;
				}
				break;
			case Hex:
				{
				alt18 = 7;
				}
				break;
			case True:
				{
				alt18 = 8;
				}
				break;
			case False:
				{
				alt18 = 9;
				}
				break;
			case Null:
				{
				alt18 = 10;
				}
				break;
			case LBracket:
				{
				alt18 = 11;
				}
				break;
			case LBrace:
				{
				alt18 = 12;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:185:7: StringLiteral
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 7);
				StringLiteral47=(CommonToken)Match(input,StringLiteral,Follow._StringLiteral_in_constant672); 
				StringLiteral47_tree = (CommonTree)adaptor.Create(StringLiteral47);
				adaptor.AddChild(root_0, StringLiteral47_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:186:7: SignedLong
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 7);
				SignedLong48=(CommonToken)Match(input,SignedLong,Follow._SignedLong_in_constant680); 
				SignedLong48_tree = (CommonTree)adaptor.Create(SignedLong48);
				adaptor.AddChild(root_0, SignedLong48_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:187:7: Integer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 7);
				Integer49=(CommonToken)Match(input,Integer,Follow._Integer_in_constant688); 
				Integer49_tree = (CommonTree)adaptor.Create(Integer49);
				adaptor.AddChild(root_0, Integer49_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:188:7: UnsignedInteger
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 7);
				UnsignedInteger50=(CommonToken)Match(input,UnsignedInteger,Follow._UnsignedInteger_in_constant696); 
				UnsignedInteger50_tree = (CommonTree)adaptor.Create(UnsignedInteger50);
				adaptor.AddChild(root_0, UnsignedInteger50_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:189:7: Double
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 7);
				Double51=(CommonToken)Match(input,Double,Follow._Double_in_constant704); 
				Double51_tree = (CommonTree)adaptor.Create(Double51);
				adaptor.AddChild(root_0, Double51_tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:190:7: Decimal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 7);
				Decimal52=(CommonToken)Match(input,Decimal,Follow._Decimal_in_constant712); 
				Decimal52_tree = (CommonTree)adaptor.Create(Decimal52);
				adaptor.AddChild(root_0, Decimal52_tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:191:7: Hex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 7);
				Hex53=(CommonToken)Match(input,Hex,Follow._Hex_in_constant720); 
				Hex53_tree = (CommonTree)adaptor.Create(Hex53);
				adaptor.AddChild(root_0, Hex53_tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:192:7: True
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 7);
				True54=(CommonToken)Match(input,True,Follow._True_in_constant728); 
				True54_tree = (CommonTree)adaptor.Create(True54);
				adaptor.AddChild(root_0, True54_tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:193:7: False
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 7);
				False55=(CommonToken)Match(input,False,Follow._False_in_constant736); 
				False55_tree = (CommonTree)adaptor.Create(False55);
				adaptor.AddChild(root_0, False55_tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:194:7: Null
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 7);
				Null56=(CommonToken)Match(input,Null,Follow._Null_in_constant744); 
				Null56_tree = (CommonTree)adaptor.Create(Null56);
				adaptor.AddChild(root_0, Null56_tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:195:7: list
				{
				DebugLocation(195, 7);
				PushFollow(Follow._list_in_constant752);
				list57=list();
				PopFollow();

				stream_list.Add(list57.Tree);


				{
				// AST REWRITE
				// elements: list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:12: -> ^( ConstList list )
				{
					DebugLocation(195, 15);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:195:15: ^( ConstList list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 18);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ConstList, "ConstList"), root_1);

					DebugLocation(195, 28);
					adaptor.AddChild(root_1, stream_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:196:7: dict
				{
				DebugLocation(196, 7);
				PushFollow(Follow._dict_in_constant770);
				dict58=dict();
				PopFollow();

				stream_dict.Add(dict58.Tree);


				{
				// AST REWRITE
				// elements: dict
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:12: -> ^( ConstDict dict )
				{
					DebugLocation(196, 15);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:196:15: ^( ConstDict dict )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 18);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ConstDict, "ConstDict"), root_1);

					DebugLocation(196, 28);
					adaptor.AddChild(root_1, stream_dict.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 8);
			LeaveRule("constant", 8);
			LeaveRule_constant();
		}
		DebugLocation(197, 4);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_tuple();
	partial void LeaveRule_tuple();

	// $ANTLR start "tuple"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:199:1: tuple : dictKey Assign expression -> dictKey expression ;
	[GrammarRule("tuple")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tuple()
	{
		EnterRule_tuple();
		EnterRule("tuple", 9);
		TraceIn("tuple", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Assign60 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dictKey59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression61 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Assign60_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Assign=new RewriteRuleITokenStream(adaptor,"token Assign");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_dictKey=new RewriteRuleSubtreeStream(adaptor,"rule dictKey");
		try { DebugEnterRule(GrammarFileName, "tuple");
		DebugLocation(199, 55);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:199:6: ( dictKey Assign expression -> dictKey expression )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:199:9: dictKey Assign expression
			{
			DebugLocation(199, 9);
			PushFollow(Follow._dictKey_in_tuple795);
			dictKey59=dictKey();
			PopFollow();

			stream_dictKey.Add(dictKey59.Tree);
			DebugLocation(199, 17);
			Assign60=(CommonToken)Match(input,Assign,Follow._Assign_in_tuple797);  
			stream_Assign.Add(Assign60);

			DebugLocation(199, 24);
			PushFollow(Follow._expression_in_tuple799);
			expression61=expression();
			PopFollow();

			stream_expression.Add(expression61.Tree);


			{
			// AST REWRITE
			// elements: dictKey, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 199:35: -> dictKey expression
			{
				DebugLocation(199, 38);
				adaptor.AddChild(root_0, stream_dictKey.NextTree());
				DebugLocation(199, 46);
				adaptor.AddChild(root_0, stream_expression.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tuple", 9);
			LeaveRule("tuple", 9);
			LeaveRule_tuple();
		}
		DebugLocation(199, 55);
		} finally { DebugExitRule(GrammarFileName, "tuple"); }
		return retval;

	}
	// $ANTLR end "tuple"

	partial void EnterRule_dictKey();
	partial void LeaveRule_dictKey();

	// $ANTLR start "dictKey"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:201:1: dictKey : ( Keyword | StringLiteral );
	[GrammarRule("dictKey")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dictKey()
	{
		EnterRule_dictKey();
		EnterRule("dictKey", 10);
		TraceIn("dictKey", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set62 = default(CommonToken);

		CommonTree set62_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dictKey");
		DebugLocation(201, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:202:5: ( Keyword | StringLiteral )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(202, 5);

			set62=(CommonToken)input.LT(1);
			if (input.LA(1)==StringLiteral||input.LA(1)==Keyword)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set62));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dictKey", 10);
			LeaveRule("dictKey", 10);
			LeaveRule_dictKey();
		}
		DebugLocation(204, 4);
		} finally { DebugExitRule(GrammarFileName, "dictKey"); }
		return retval;

	}
	// $ANTLR end "dictKey"

	partial void EnterRule_dict();
	partial void LeaveRule_dict();

	// $ANTLR start "dict"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:206:1: dict : LBrace ( RBrace -> Empty | tuple ( Comma tuple )* RBrace -> ( tuple )+ ) ;
	[GrammarRule("dict")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dict()
	{
		EnterRule_dict();
		EnterRule("dict", 11);
		TraceIn("dict", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LBrace63 = default(CommonToken);
		CommonToken RBrace64 = default(CommonToken);
		CommonToken Comma66 = default(CommonToken);
		CommonToken RBrace68 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tuple65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tuple67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LBrace63_tree = default(CommonTree);
		CommonTree RBrace64_tree = default(CommonTree);
		CommonTree Comma66_tree = default(CommonTree);
		CommonTree RBrace68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LBrace=new RewriteRuleITokenStream(adaptor,"token LBrace");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_RBrace=new RewriteRuleITokenStream(adaptor,"token RBrace");
		RewriteRuleSubtreeStream stream_tuple=new RewriteRuleSubtreeStream(adaptor,"rule tuple");
		try { DebugEnterRule(GrammarFileName, "dict");
		DebugLocation(206, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:207:5: ( LBrace ( RBrace -> Empty | tuple ( Comma tuple )* RBrace -> ( tuple )+ ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:207:7: LBrace ( RBrace -> Empty | tuple ( Comma tuple )* RBrace -> ( tuple )+ )
			{
			DebugLocation(207, 7);
			LBrace63=(CommonToken)Match(input,LBrace,Follow._LBrace_in_dict842);  
			stream_LBrace.Add(LBrace63);

			DebugLocation(207, 14);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:207:14: ( RBrace -> Empty | tuple ( Comma tuple )* RBrace -> ( tuple )+ )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==RBrace))
			{
				alt20 = 1;
			}
			else if ((LA20_0==StringLiteral||LA20_0==Keyword))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:207:16: RBrace
				{
				DebugLocation(207, 16);
				RBrace64=(CommonToken)Match(input,RBrace,Follow._RBrace_in_dict846);  
				stream_RBrace.Add(RBrace64);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 207:23: -> Empty
				{
					DebugLocation(207, 26);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(Empty, "Empty"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:208:11: tuple ( Comma tuple )* RBrace
				{
				DebugLocation(208, 11);
				PushFollow(Follow._tuple_in_dict862);
				tuple65=tuple();
				PopFollow();

				stream_tuple.Add(tuple65.Tree);
				DebugLocation(208, 17);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:208:17: ( Comma tuple )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==Comma))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:208:19: Comma tuple
						{
						DebugLocation(208, 19);
						Comma66=(CommonToken)Match(input,Comma,Follow._Comma_in_dict866);  
						stream_Comma.Add(Comma66);

						DebugLocation(208, 25);
						PushFollow(Follow._tuple_in_dict868);
						tuple67=tuple();
						PopFollow();

						stream_tuple.Add(tuple67.Tree);

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(208, 34);
				RBrace68=(CommonToken)Match(input,RBrace,Follow._RBrace_in_dict873);  
				stream_RBrace.Add(RBrace68);



				{
				// AST REWRITE
				// elements: tuple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 208:41: -> ( tuple )+
				{
					DebugLocation(208, 44);
					if (!(stream_tuple.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_tuple.HasNext )
					{
						DebugLocation(208, 44);
						adaptor.AddChild(root_0, stream_tuple.NextTree());

					}
					stream_tuple.Reset();

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dict", 11);
			LeaveRule("dict", 11);
			LeaveRule_dict();
		}
		DebugLocation(209, 4);
		} finally { DebugExitRule(GrammarFileName, "dict"); }
		return retval;

	}
	// $ANTLR end "dict"

	partial void EnterRule_list();
	partial void LeaveRule_list();

	// $ANTLR start "list"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:211:1: list : LBracket ( RBracket -> Empty | expression ( Comma expression )* RBracket -> ( expression )+ ) ;
	[GrammarRule("list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> list()
	{
		EnterRule_list();
		EnterRule("list", 12);
		TraceIn("list", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LBracket69 = default(CommonToken);
		CommonToken RBracket70 = default(CommonToken);
		CommonToken Comma72 = default(CommonToken);
		CommonToken RBracket74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LBracket69_tree = default(CommonTree);
		CommonTree RBracket70_tree = default(CommonTree);
		CommonTree Comma72_tree = default(CommonTree);
		CommonTree RBracket74_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBracket=new RewriteRuleITokenStream(adaptor,"token RBracket");
		RewriteRuleITokenStream stream_LBracket=new RewriteRuleITokenStream(adaptor,"token LBracket");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "list");
		DebugLocation(211, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:212:5: ( LBracket ( RBracket -> Empty | expression ( Comma expression )* RBracket -> ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:212:7: LBracket ( RBracket -> Empty | expression ( Comma expression )* RBracket -> ( expression )+ )
			{
			DebugLocation(212, 7);
			LBracket69=(CommonToken)Match(input,LBracket,Follow._LBracket_in_list897);  
			stream_LBracket.Add(LBracket69);

			DebugLocation(212, 16);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:212:16: ( RBracket -> Empty | expression ( Comma expression )* RBracket -> ( expression )+ )
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==RBracket))
			{
				alt22 = 1;
			}
			else if (((LA22_0>=EStart && LA22_0<=MStart)||(LA22_0>=EPass && LA22_0<=MPass)||LA22_0==Minus||LA22_0==LP||LA22_0==LBrace||(LA22_0>=LBracket && LA22_0<=SignedLong)||(LA22_0>=StringLiteral && LA22_0<=Decimal)||(LA22_0>=True && LA22_0<=False)||LA22_0==Null||LA22_0==Not||LA22_0==Integer||LA22_0==Plus))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:212:18: RBracket
				{
				DebugLocation(212, 18);
				RBracket70=(CommonToken)Match(input,RBracket,Follow._RBracket_in_list901);  
				stream_RBracket.Add(RBracket70);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 212:27: -> Empty
				{
					DebugLocation(212, 30);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(Empty, "Empty"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:213:11: expression ( Comma expression )* RBracket
				{
				DebugLocation(213, 11);
				PushFollow(Follow._expression_in_list917);
				expression71=expression();
				PopFollow();

				stream_expression.Add(expression71.Tree);
				DebugLocation(213, 22);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:213:22: ( Comma expression )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==Comma))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:213:24: Comma expression
						{
						DebugLocation(213, 24);
						Comma72=(CommonToken)Match(input,Comma,Follow._Comma_in_list921);  
						stream_Comma.Add(Comma72);

						DebugLocation(213, 30);
						PushFollow(Follow._expression_in_list923);
						expression73=expression();
						PopFollow();

						stream_expression.Add(expression73.Tree);

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(213, 44);
				RBracket74=(CommonToken)Match(input,RBracket,Follow._RBracket_in_list928);  
				stream_RBracket.Add(RBracket74);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 213:53: -> ( expression )+
				{
					DebugLocation(213, 56);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(213, 56);
						adaptor.AddChild(root_0, stream_expression.NextTree());

					}
					stream_expression.Reset();

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list", 12);
			LeaveRule("list", 12);
			LeaveRule_list();
		}
		DebugLocation(214, 4);
		} finally { DebugExitRule(GrammarFileName, "list"); }
		return retval;

	}
	// $ANTLR end "list"

	partial void EnterRule_dynamicString();
	partial void LeaveRule_dynamicString();

	// $ANTLR start "dynamicString"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:216:1: dynamicString : DynamicString ( dynamicStringSection )* DynamicString -> ( dynamicStringSection )* ;
	[GrammarRule("dynamicString")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dynamicString()
	{
		EnterRule_dynamicString();
		EnterRule("dynamicString", 13);
		TraceIn("dynamicString", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DynamicString75 = default(CommonToken);
		CommonToken DynamicString77 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dynamicStringSection76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DynamicString75_tree = default(CommonTree);
		CommonTree DynamicString77_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DynamicString=new RewriteRuleITokenStream(adaptor,"token DynamicString");
		RewriteRuleSubtreeStream stream_dynamicStringSection=new RewriteRuleSubtreeStream(adaptor,"rule dynamicStringSection");
		try { DebugEnterRule(GrammarFileName, "dynamicString");
		DebugLocation(216, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:217:5: ( DynamicString ( dynamicStringSection )* DynamicString -> ( dynamicStringSection )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:217:7: DynamicString ( dynamicStringSection )* DynamicString
			{
			DebugLocation(217, 7);
			DynamicString75=(CommonToken)Match(input,DynamicString,Follow._DynamicString_in_dynamicString952);  
			stream_DynamicString.Add(DynamicString75);

			DebugLocation(217, 21);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:217:21: ( dynamicStringSection )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if (((LA23_0>=Literal && LA23_0<=MStart)||(LA23_0>=EPass && LA23_0<=MPass)))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:217:21: dynamicStringSection
					{
					DebugLocation(217, 21);
					PushFollow(Follow._dynamicStringSection_in_dynamicString954);
					dynamicStringSection76=dynamicStringSection();
					PopFollow();

					stream_dynamicStringSection.Add(dynamicStringSection76.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(217, 43);
			DynamicString77=(CommonToken)Match(input,DynamicString,Follow._DynamicString_in_dynamicString957);  
			stream_DynamicString.Add(DynamicString77);



			{
			// AST REWRITE
			// elements: dynamicStringSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 218:9: -> ( dynamicStringSection )*
			{
				DebugLocation(218, 12);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:218:12: ( dynamicStringSection )*
				while ( stream_dynamicStringSection.HasNext )
				{
					DebugLocation(218, 12);
					adaptor.AddChild(root_0, stream_dynamicStringSection.NextTree());

				}
				stream_dynamicStringSection.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dynamicString", 13);
			LeaveRule("dynamicString", 13);
			LeaveRule_dynamicString();
		}
		DebugLocation(219, 4);
		} finally { DebugExitRule(GrammarFileName, "dynamicString"); }
		return retval;

	}
	// $ANTLR end "dynamicString"

	partial void EnterRule_dynamicStringSection();
	partial void LeaveRule_dynamicStringSection();

	// $ANTLR start "dynamicStringSection"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:221:1: dynamicStringSection : ( Literal -> Literal | statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) );
	[GrammarRule("dynamicStringSection")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dynamicStringSection()
	{
		EnterRule_dynamicStringSection();
		EnterRule("dynamicStringSection", 14);
		TraceIn("dynamicStringSection", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Literal78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> passthrough80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Literal78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Literal=new RewriteRuleITokenStream(adaptor,"token Literal");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_passthrough=new RewriteRuleSubtreeStream(adaptor,"rule passthrough");
		try { DebugEnterRule(GrammarFileName, "dynamicStringSection");
		DebugLocation(221, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:222:5: ( Literal -> Literal | statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) )
			int alt24=3;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case Literal:
				{
				alt24 = 1;
				}
				break;
			case EStart:
			case MStart:
				{
				alt24 = 2;
				}
				break;
			case EPass:
			case MPass:
				{
				alt24 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:222:7: Literal
				{
				DebugLocation(222, 7);
				Literal78=(CommonToken)Match(input,Literal,Follow._Literal_in_dynamicStringSection987);  
				stream_Literal.Add(Literal78);



				{
				// AST REWRITE
				// elements: Literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 222:15: -> Literal
				{
					DebugLocation(222, 18);
					adaptor.AddChild(root_0, stream_Literal.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:223:7: statement
				{
				DebugLocation(223, 7);
				PushFollow(Follow._statement_in_dynamicStringSection999);
				statement79=statement();
				PopFollow();

				stream_statement.Add(statement79.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 223:17: -> ^( Statement statement )
				{
					DebugLocation(223, 20);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:223:20: ^( Statement statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(223, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_1);

					DebugLocation(223, 33);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:224:7: passthrough
				{
				DebugLocation(224, 7);
				PushFollow(Follow._passthrough_in_dynamicStringSection1017);
				passthrough80=passthrough();
				PopFollow();

				stream_passthrough.Add(passthrough80.Tree);


				{
				// AST REWRITE
				// elements: passthrough
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 224:19: -> ^( Passthrough passthrough )
				{
					DebugLocation(224, 22);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:224:22: ^( Passthrough passthrough )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(224, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Passthrough, "Passthrough"), root_1);

					DebugLocation(224, 37);
					adaptor.AddChild(root_1, stream_passthrough.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dynamicStringSection", 14);
			LeaveRule("dynamicStringSection", 14);
			LeaveRule_dynamicStringSection();
		}
		DebugLocation(225, 4);
		} finally { DebugExitRule(GrammarFileName, "dynamicStringSection"); }
		return retval;

	}
	// $ANTLR end "dynamicStringSection"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:227:1: expression : logical_and_expression ( OR ^ logical_and_expression )* ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 15);
		TraceIn("expression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR82 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> logical_and_expression81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> logical_and_expression83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR82_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(227, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:228:2: ( logical_and_expression ( OR ^ logical_and_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:228:4: logical_and_expression ( OR ^ logical_and_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(228, 4);
			PushFollow(Follow._logical_and_expression_in_expression1041);
			logical_and_expression81=logical_and_expression();
			PopFollow();

			adaptor.AddChild(root_0, logical_and_expression81.Tree);
			DebugLocation(228, 27);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:228:27: ( OR ^ logical_and_expression )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==OR))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:228:29: OR ^ logical_and_expression
					{
					DebugLocation(228, 31);
					OR82=(CommonToken)Match(input,OR,Follow._OR_in_expression1045); 
					OR82_tree = (CommonTree)adaptor.Create(OR82);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR82_tree, root_0);
					DebugLocation(228, 33);
					PushFollow(Follow._logical_and_expression_in_expression1048);
					logical_and_expression83=logical_and_expression();
					PopFollow();

					adaptor.AddChild(root_0, logical_and_expression83.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 15);
			LeaveRule("expression", 15);
			LeaveRule_expression();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:231:1: logical_and_expression : equality_expression ( AND ^ equality_expression )* ;
	[GrammarRule("logical_and_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 16);
		TraceIn("logical_and_expression", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND85 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> equality_expression84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> equality_expression86 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND85_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(231, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:232:2: ( equality_expression ( AND ^ equality_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:232:4: equality_expression ( AND ^ equality_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(232, 4);
			PushFollow(Follow._equality_expression_in_logical_and_expression1062);
			equality_expression84=equality_expression();
			PopFollow();

			adaptor.AddChild(root_0, equality_expression84.Tree);
			DebugLocation(232, 24);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:232:24: ( AND ^ equality_expression )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==AND))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:232:26: AND ^ equality_expression
					{
					DebugLocation(232, 29);
					AND85=(CommonToken)Match(input,AND,Follow._AND_in_logical_and_expression1066); 
					AND85_tree = (CommonTree)adaptor.Create(AND85);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND85_tree, root_0);
					DebugLocation(232, 31);
					PushFollow(Follow._equality_expression_in_logical_and_expression1069);
					equality_expression86=equality_expression();
					PopFollow();

					adaptor.AddChild(root_0, equality_expression86.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 16);
			LeaveRule("logical_and_expression", 16);
			LeaveRule_logical_and_expression();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:235:1: equality_expression : relational_expression ( ( EQ | NEQ ) ^ relational_expression )* ;
	[GrammarRule("equality_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 17);
		TraceIn("equality_expression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set88 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> relational_expression87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> relational_expression89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set88_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(235, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:236:2: ( relational_expression ( ( EQ | NEQ ) ^ relational_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:236:4: relational_expression ( ( EQ | NEQ ) ^ relational_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(236, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1083);
			relational_expression87=relational_expression();
			PopFollow();

			adaptor.AddChild(root_0, relational_expression87.Tree);
			DebugLocation(236, 26);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:236:26: ( ( EQ | NEQ ) ^ relational_expression )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if (((LA27_0>=EQ && LA27_0<=NEQ)))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:236:28: ( EQ | NEQ ) ^ relational_expression
					{
					DebugLocation(236, 40);

					set88=(CommonToken)input.LT(1);
					set88=(CommonToken)input.LT(1);
					if ((input.LA(1)>=EQ && input.LA(1)<=NEQ))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set88), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(236, 42);
					PushFollow(Follow._relational_expression_in_equality_expression1098);
					relational_expression89=relational_expression();
					PopFollow();

					adaptor.AddChild(root_0, relational_expression89.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 17);
			LeaveRule("equality_expression", 17);
			LeaveRule_equality_expression();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:239:1: relational_expression : additive_expression ( ( LT | GT | LE | GE ) ^ additive_expression )* ;
	[GrammarRule("relational_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 18);
		TraceIn("relational_expression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set91 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> additive_expression90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> additive_expression92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set91_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(239, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:240:2: ( additive_expression ( ( LT | GT | LE | GE ) ^ additive_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:240:4: additive_expression ( ( LT | GT | LE | GE ) ^ additive_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(240, 4);
			PushFollow(Follow._additive_expression_in_relational_expression1112);
			additive_expression90=additive_expression();
			PopFollow();

			adaptor.AddChild(root_0, additive_expression90.Tree);
			DebugLocation(240, 24);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:240:24: ( ( LT | GT | LE | GE ) ^ additive_expression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if (((LA28_0>=LE && LA28_0<=GT)))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:240:26: ( LT | GT | LE | GE ) ^ additive_expression
					{
					DebugLocation(240, 47);

					set91=(CommonToken)input.LT(1);
					set91=(CommonToken)input.LT(1);
					if ((input.LA(1)>=LE && input.LA(1)<=GT))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set91), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(240, 49);
					PushFollow(Follow._additive_expression_in_relational_expression1135);
					additive_expression92=additive_expression();
					PopFollow();

					adaptor.AddChild(root_0, additive_expression92.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 18);
			LeaveRule("relational_expression", 18);
			LeaveRule_relational_expression();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:243:1: additive_expression : multiplicative_expression ( ( Minus | Add ) ^ multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 19);
		TraceIn("additive_expression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set94 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicative_expression93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicative_expression95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set94_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(243, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:244:2: ( multiplicative_expression ( ( Minus | Add ) ^ multiplicative_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:244:4: multiplicative_expression ( ( Minus | Add ) ^ multiplicative_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(244, 4);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1149);
			multiplicative_expression93=multiplicative_expression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicative_expression93.Tree);
			DebugLocation(244, 30);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:244:30: ( ( Minus | Add ) ^ multiplicative_expression )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Add && LA29_0<=Minus)))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:244:32: ( Minus | Add ) ^ multiplicative_expression
					{
					DebugLocation(244, 47);

					set94=(CommonToken)input.LT(1);
					set94=(CommonToken)input.LT(1);
					if ((input.LA(1)>=Add && input.LA(1)<=Minus))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set94), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(244, 49);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1164);
					multiplicative_expression95=multiplicative_expression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicative_expression95.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 19);
			LeaveRule("additive_expression", 19);
			LeaveRule_additive_expression();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:247:1: multiplicative_expression : unary_expression ( ( Mul | Div | Mod ) ^ unary_expression )* ;
	[GrammarRule("multiplicative_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 20);
		TraceIn("multiplicative_expression", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set97 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(247, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:248:2: ( unary_expression ( ( Mul | Div | Mod ) ^ unary_expression )* )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:248:4: unary_expression ( ( Mul | Div | Mod ) ^ unary_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(248, 4);
			PushFollow(Follow._unary_expression_in_multiplicative_expression1178);
			unary_expression96=unary_expression();
			PopFollow();

			adaptor.AddChild(root_0, unary_expression96.Tree);
			DebugLocation(248, 21);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:248:21: ( ( Mul | Div | Mod ) ^ unary_expression )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if (((LA30_0>=Div && LA30_0<=Mod)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:248:23: ( Mul | Div | Mod ) ^ unary_expression
					{
					DebugLocation(248, 42);

					set97=(CommonToken)input.LT(1);
					set97=(CommonToken)input.LT(1);
					if ((input.LA(1)>=Div && input.LA(1)<=Mod))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set97), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(248, 44);
					PushFollow(Follow._unary_expression_in_multiplicative_expression1197);
					unary_expression98=unary_expression();
					PopFollow();

					adaptor.AddChild(root_0, unary_expression98.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 20);
			LeaveRule("multiplicative_expression", 20);
			LeaveRule_multiplicative_expression();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:251:1: unary_expression : ( primary_expression -> primary_expression | Plus unary_expression -> ^( Unary Plus unary_expression ) | Minus unary_expression -> ^( Unary Minus unary_expression ) | Not unary_expression -> ^( Unary Not unary_expression ) );
	[GrammarRule("unary_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 21);
		TraceIn("unary_expression", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Plus100 = default(CommonToken);
		CommonToken Minus102 = default(CommonToken);
		CommonToken Not104 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> primary_expression99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unary_expression105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Plus100_tree = default(CommonTree);
		CommonTree Minus102_tree = default(CommonTree);
		CommonTree Not104_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Plus=new RewriteRuleITokenStream(adaptor,"token Plus");
		RewriteRuleITokenStream stream_Minus=new RewriteRuleITokenStream(adaptor,"token Minus");
		RewriteRuleITokenStream stream_Not=new RewriteRuleITokenStream(adaptor,"token Not");
		RewriteRuleSubtreeStream stream_primary_expression=new RewriteRuleSubtreeStream(adaptor,"rule primary_expression");
		RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(251, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:252:2: ( primary_expression -> primary_expression | Plus unary_expression -> ^( Unary Plus unary_expression ) | Minus unary_expression -> ^( Unary Minus unary_expression ) | Not unary_expression -> ^( Unary Not unary_expression ) )
			int alt31=4;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case EStart:
			case MStart:
			case EPass:
			case MPass:
			case LP:
			case LBrace:
			case LBracket:
			case SignedLong:
			case StringLiteral:
			case DynamicString:
			case UnsignedInteger:
			case Double:
			case Hex:
			case Decimal:
			case True:
			case False:
			case Null:
			case Integer:
				{
				alt31 = 1;
				}
				break;
			case Plus:
				{
				alt31 = 2;
				}
				break;
			case Minus:
				{
				alt31 = 3;
				}
				break;
			case Not:
				{
				alt31 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:252:4: primary_expression
				{
				DebugLocation(252, 4);
				PushFollow(Follow._primary_expression_in_unary_expression1211);
				primary_expression99=primary_expression();
				PopFollow();

				stream_primary_expression.Add(primary_expression99.Tree);


				{
				// AST REWRITE
				// elements: primary_expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 252:23: -> primary_expression
				{
					DebugLocation(252, 26);
					adaptor.AddChild(root_0, stream_primary_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:253:4: Plus unary_expression
				{
				DebugLocation(253, 4);
				Plus100=(CommonToken)Match(input,Plus,Follow._Plus_in_unary_expression1220);  
				stream_Plus.Add(Plus100);

				DebugLocation(253, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1222);
				unary_expression101=unary_expression();
				PopFollow();

				stream_unary_expression.Add(unary_expression101.Tree);


				{
				// AST REWRITE
				// elements: unary_expression, Plus
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 253:26: -> ^( Unary Plus unary_expression )
				{
					DebugLocation(253, 29);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:253:29: ^( Unary Plus unary_expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(253, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Unary, "Unary"), root_1);

					DebugLocation(253, 38);
					adaptor.AddChild(root_1, stream_Plus.NextNode());
					DebugLocation(253, 43);
					adaptor.AddChild(root_1, stream_unary_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:254:7: Minus unary_expression
				{
				DebugLocation(254, 7);
				Minus102=(CommonToken)Match(input,Minus,Follow._Minus_in_unary_expression1242);  
				stream_Minus.Add(Minus102);

				DebugLocation(254, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1244);
				unary_expression103=unary_expression();
				PopFollow();

				stream_unary_expression.Add(unary_expression103.Tree);


				{
				// AST REWRITE
				// elements: unary_expression, Minus
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 254:30: -> ^( Unary Minus unary_expression )
				{
					DebugLocation(254, 33);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:254:33: ^( Unary Minus unary_expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Unary, "Unary"), root_1);

					DebugLocation(254, 42);
					adaptor.AddChild(root_1, stream_Minus.NextNode());
					DebugLocation(254, 48);
					adaptor.AddChild(root_1, stream_unary_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:255:7: Not unary_expression
				{
				DebugLocation(255, 7);
				Not104=(CommonToken)Match(input,Not,Follow._Not_in_unary_expression1264);  
				stream_Not.Add(Not104);

				DebugLocation(255, 11);
				PushFollow(Follow._unary_expression_in_unary_expression1266);
				unary_expression105=unary_expression();
				PopFollow();

				stream_unary_expression.Add(unary_expression105.Tree);


				{
				// AST REWRITE
				// elements: unary_expression, Not
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 255:28: -> ^( Unary Not unary_expression )
				{
					DebugLocation(255, 31);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:255:31: ^( Unary Not unary_expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(255, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Unary, "Unary"), root_1);

					DebugLocation(255, 40);
					adaptor.AddChild(root_1, stream_Not.NextNode());
					DebugLocation(255, 44);
					adaptor.AddChild(root_1, stream_unary_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 21);
			LeaveRule("unary_expression", 21);
			LeaveRule_unary_expression();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:258:1: primary_expression : ( statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) | dynamicString -> ^( DynamicString dynamicString ) | constant -> ^( Constant constant ) | LP expression RP -> ^( Nested expression ) );
	[GrammarRule("primary_expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 22);
		TraceIn("primary_expression", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LP110 = default(CommonToken);
		CommonToken RP112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> passthrough107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> dynamicString108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> constant109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LP110_tree = default(CommonTree);
		CommonTree RP112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
		RewriteRuleSubtreeStream stream_passthrough=new RewriteRuleSubtreeStream(adaptor,"rule passthrough");
		RewriteRuleSubtreeStream stream_dynamicString=new RewriteRuleSubtreeStream(adaptor,"rule dynamicString");
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(258, 1);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:259:5: ( statement -> ^( Statement statement ) | passthrough -> ^( Passthrough passthrough ) | dynamicString -> ^( DynamicString dynamicString ) | constant -> ^( Constant constant ) | LP expression RP -> ^( Nested expression ) )
			int alt32=5;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case EStart:
			case MStart:
				{
				alt32 = 1;
				}
				break;
			case EPass:
			case MPass:
				{
				alt32 = 2;
				}
				break;
			case DynamicString:
				{
				alt32 = 3;
				}
				break;
			case LBrace:
			case LBracket:
			case SignedLong:
			case StringLiteral:
			case UnsignedInteger:
			case Double:
			case Hex:
			case Decimal:
			case True:
			case False:
			case Null:
			case Integer:
				{
				alt32 = 4;
				}
				break;
			case LP:
				{
				alt32 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:259:7: statement
				{
				DebugLocation(259, 7);
				PushFollow(Follow._statement_in_primary_expression1292);
				statement106=statement();
				PopFollow();

				stream_statement.Add(statement106.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 259:17: -> ^( Statement statement )
				{
					DebugLocation(259, 20);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:259:20: ^( Statement statement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(259, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_1);

					DebugLocation(259, 33);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:260:7: passthrough
				{
				DebugLocation(260, 7);
				PushFollow(Follow._passthrough_in_primary_expression1310);
				passthrough107=passthrough();
				PopFollow();

				stream_passthrough.Add(passthrough107.Tree);


				{
				// AST REWRITE
				// elements: passthrough
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:19: -> ^( Passthrough passthrough )
				{
					DebugLocation(260, 22);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:260:22: ^( Passthrough passthrough )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Passthrough, "Passthrough"), root_1);

					DebugLocation(260, 37);
					adaptor.AddChild(root_1, stream_passthrough.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:261:7: dynamicString
				{
				DebugLocation(261, 7);
				PushFollow(Follow._dynamicString_in_primary_expression1328);
				dynamicString108=dynamicString();
				PopFollow();

				stream_dynamicString.Add(dynamicString108.Tree);


				{
				// AST REWRITE
				// elements: dynamicString
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 261:21: -> ^( DynamicString dynamicString )
				{
					DebugLocation(261, 24);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:261:24: ^( DynamicString dynamicString )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DynamicString, "DynamicString"), root_1);

					DebugLocation(261, 41);
					adaptor.AddChild(root_1, stream_dynamicString.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:262:7: constant
				{
				DebugLocation(262, 7);
				PushFollow(Follow._constant_in_primary_expression1346);
				constant109=constant();
				PopFollow();

				stream_constant.Add(constant109.Tree);


				{
				// AST REWRITE
				// elements: constant
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 262:16: -> ^( Constant constant )
				{
					DebugLocation(262, 19);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:262:19: ^( Constant constant )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(262, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Constant, "Constant"), root_1);

					DebugLocation(262, 31);
					adaptor.AddChild(root_1, stream_constant.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:263:4: LP expression RP
				{
				DebugLocation(263, 4);
				LP110=(CommonToken)Match(input,LP,Follow._LP_in_primary_expression1361);  
				stream_LP.Add(LP110);

				DebugLocation(263, 7);
				PushFollow(Follow._expression_in_primary_expression1363);
				expression111=expression();
				PopFollow();

				stream_expression.Add(expression111.Tree);
				DebugLocation(263, 18);
				RP112=(CommonToken)Match(input,RP,Follow._RP_in_primary_expression1365);  
				stream_RP.Add(RP112);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 263:21: -> ^( Nested expression )
				{
					DebugLocation(263, 24);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:263:24: ^( Nested expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(263, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Nested, "Nested"), root_1);

					DebugLocation(263, 34);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 22);
			LeaveRule("primary_expression", 22);
			LeaveRule_primary_expression();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_if();
	partial void LeaveRule_if();

	// $ANTLR start "if"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:266:1: if : If LP ifCond= expression RP ifBlock= block ( ElseIf LP elseIfCond+= expression RP elseIfBlock+= block )* ( Else elseBlock= block )? End -> ^( If $ifCond $ifBlock ( ^( Else $elseBlock) )? ( ^( ElseIf $elseIfCond $elseIfBlock) )* ) ;
	[GrammarRule("if")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> @if()
	{
		EnterRule_if();
		EnterRule("if", 23);
		TraceIn("if", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken If113 = default(CommonToken);
		CommonToken LP114 = default(CommonToken);
		CommonToken RP115 = default(CommonToken);
		CommonToken ElseIf116 = default(CommonToken);
		CommonToken LP117 = default(CommonToken);
		CommonToken RP118 = default(CommonToken);
		CommonToken Else119 = default(CommonToken);
		CommonToken End120 = default(CommonToken);
		List<CommonTree> list_elseIfCond = null;
		List<CommonTree> list_elseIfBlock = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> ifCond = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ifBlock = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elseBlock = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elseIfCond = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elseIfBlock = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree If113_tree = default(CommonTree);
		CommonTree LP114_tree = default(CommonTree);
		CommonTree RP115_tree = default(CommonTree);
		CommonTree ElseIf116_tree = default(CommonTree);
		CommonTree LP117_tree = default(CommonTree);
		CommonTree RP118_tree = default(CommonTree);
		CommonTree Else119_tree = default(CommonTree);
		CommonTree End120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_End=new RewriteRuleITokenStream(adaptor,"token End");
		RewriteRuleITokenStream stream_ElseIf=new RewriteRuleITokenStream(adaptor,"token ElseIf");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Else=new RewriteRuleITokenStream(adaptor,"token Else");
		RewriteRuleITokenStream stream_If=new RewriteRuleITokenStream(adaptor,"token If");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "if");
		DebugLocation(266, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:267:5: ( If LP ifCond= expression RP ifBlock= block ( ElseIf LP elseIfCond+= expression RP elseIfBlock+= block )* ( Else elseBlock= block )? End -> ^( If $ifCond $ifBlock ( ^( Else $elseBlock) )? ( ^( ElseIf $elseIfCond $elseIfBlock) )* ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:267:7: If LP ifCond= expression RP ifBlock= block ( ElseIf LP elseIfCond+= expression RP elseIfBlock+= block )* ( Else elseBlock= block )? End
			{
			DebugLocation(267, 7);
			If113=(CommonToken)Match(input,If,Follow._If_in_if1389);  
			stream_If.Add(If113);

			DebugLocation(267, 10);
			LP114=(CommonToken)Match(input,LP,Follow._LP_in_if1391);  
			stream_LP.Add(LP114);

			DebugLocation(267, 19);
			PushFollow(Follow._expression_in_if1395);
			ifCond=expression();
			PopFollow();

			stream_expression.Add(ifCond.Tree);
			DebugLocation(267, 31);
			RP115=(CommonToken)Match(input,RP,Follow._RP_in_if1397);  
			stream_RP.Add(RP115);

			DebugLocation(268, 16);
			PushFollow(Follow._block_in_if1409);
			ifBlock=block();
			PopFollow();

			stream_block.Add(ifBlock.Tree);
			DebugLocation(269, 9);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:269:9: ( ElseIf LP elseIfCond+= expression RP elseIfBlock+= block )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==ElseIf))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:269:11: ElseIf LP elseIfCond+= expression RP elseIfBlock+= block
					{
					DebugLocation(269, 11);
					ElseIf116=(CommonToken)Match(input,ElseIf,Follow._ElseIf_in_if1421);  
					stream_ElseIf.Add(ElseIf116);

					DebugLocation(269, 18);
					LP117=(CommonToken)Match(input,LP,Follow._LP_in_if1423);  
					stream_LP.Add(LP117);

					DebugLocation(269, 31);
					PushFollow(Follow._expression_in_if1427);
					elseIfCond=expression();
					PopFollow();

					stream_expression.Add(elseIfCond.Tree);
					if (list_elseIfCond==null) list_elseIfCond=new List<CommonTree>();
					list_elseIfCond.Add(elseIfCond.Tree);

					DebugLocation(269, 44);
					RP118=(CommonToken)Match(input,RP,Follow._RP_in_if1429);  
					stream_RP.Add(RP118);

					DebugLocation(270, 24);
					PushFollow(Follow._block_in_if1445);
					elseIfBlock=block();
					PopFollow();

					stream_block.Add(elseIfBlock.Tree);
					if (list_elseIfBlock==null) list_elseIfBlock=new List<CommonTree>();
					list_elseIfBlock.Add(elseIfBlock.Tree);


					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }

			DebugLocation(271, 9);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:271:9: ( Else elseBlock= block )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==Else))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:271:11: Else elseBlock= block
				{
				DebugLocation(271, 11);
				Else119=(CommonToken)Match(input,Else,Follow._Else_in_if1460);  
				stream_Else.Add(Else119);

				DebugLocation(272, 22);
				PushFollow(Follow._block_in_if1476);
				elseBlock=block();
				PopFollow();

				stream_block.Add(elseBlock.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(273, 9);
			End120=(CommonToken)Match(input,End,Follow._End_in_if1489);  
			stream_End.Add(End120);



			{
			// AST REWRITE
			// elements: ElseIf, Else, ifCond, elseBlock, elseIfBlock, ifBlock, elseIfCond, If
			// token labels: 
			// rule labels: retval, ifCond, ifBlock, elseBlock
			// token list labels: 
			// rule list labels: elseIfBlock, elseIfCond
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_ifCond=new RewriteRuleSubtreeStream(adaptor,"rule ifCond",ifCond!=null?ifCond.Tree:null);
			RewriteRuleSubtreeStream stream_ifBlock=new RewriteRuleSubtreeStream(adaptor,"rule ifBlock",ifBlock!=null?ifBlock.Tree:null);
			RewriteRuleSubtreeStream stream_elseBlock=new RewriteRuleSubtreeStream(adaptor,"rule elseBlock",elseBlock!=null?elseBlock.Tree:null);
			RewriteRuleSubtreeStream stream_elseIfBlock=new RewriteRuleSubtreeStream(adaptor,"token elseIfBlock",list_elseIfBlock);
			RewriteRuleSubtreeStream stream_elseIfCond=new RewriteRuleSubtreeStream(adaptor,"token elseIfCond",list_elseIfCond);
			root_0 = (CommonTree)adaptor.Nil();
			// 274:9: -> ^( If $ifCond $ifBlock ( ^( Else $elseBlock) )? ( ^( ElseIf $elseIfCond $elseIfBlock) )* )
			{
				DebugLocation(274, 12);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:274:12: ^( If $ifCond $ifBlock ( ^( Else $elseBlock) )? ( ^( ElseIf $elseIfCond $elseIfBlock) )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(274, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_If.NextNode(), root_1);

				DebugLocation(274, 19);
				adaptor.AddChild(root_1, stream_ifCond.NextTree());
				DebugLocation(274, 27);
				adaptor.AddChild(root_1, stream_ifBlock.NextTree());
				DebugLocation(275, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:275:13: ( ^( Else $elseBlock) )?
				if (stream_Else.HasNext||stream_elseBlock.HasNext)
				{
					DebugLocation(275, 13);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:275:13: ^( Else $elseBlock)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 16);
					root_2 = (CommonTree)adaptor.BecomeRoot(stream_Else.NextNode(), root_2);

					DebugLocation(275, 22);
					adaptor.AddChild(root_2, stream_elseBlock.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_Else.Reset();
				stream_elseBlock.Reset();
				DebugLocation(276, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:276:13: ( ^( ElseIf $elseIfCond $elseIfBlock) )*
				while ( stream_ElseIf.HasNext||stream_elseIfBlock.HasNext||stream_elseIfCond.HasNext )
				{
					DebugLocation(276, 13);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:276:13: ^( ElseIf $elseIfCond $elseIfBlock)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(276, 16);
					root_2 = (CommonTree)adaptor.BecomeRoot(stream_ElseIf.NextNode(), root_2);

					DebugLocation(276, 24);
					adaptor.AddChild(root_2, stream_elseIfCond.NextTree());
					DebugLocation(276, 36);
					adaptor.AddChild(root_2, stream_elseIfBlock.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ElseIf.Reset();
				stream_elseIfBlock.Reset();
				stream_elseIfCond.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if", 23);
			LeaveRule("if", 23);
			LeaveRule_if();
		}
		DebugLocation(277, 4);
		} finally { DebugExitRule(GrammarFileName, "if"); }
		return retval;

	}
	// $ANTLR end "if"

	partial void EnterRule_set();
	partial void LeaveRule_set();

	// $ANTLR start "set"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:279:1: set : Set LP statement Assign expression RP -> ^( Set ^( Statement statement ) expression ) ;
	[GrammarRule("set")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> set()
	{
		EnterRule_set();
		EnterRule("set", 24);
		TraceIn("set", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Set121 = default(CommonToken);
		CommonToken LP122 = default(CommonToken);
		CommonToken Assign124 = default(CommonToken);
		CommonToken RP126 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Set121_tree = default(CommonTree);
		CommonTree LP122_tree = default(CommonTree);
		CommonTree Assign124_tree = default(CommonTree);
		CommonTree RP126_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Assign=new RewriteRuleITokenStream(adaptor,"token Assign");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Set=new RewriteRuleITokenStream(adaptor,"token Set");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "set");
		DebugLocation(279, 90);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:279:4: ( Set LP statement Assign expression RP -> ^( Set ^( Statement statement ) expression ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:279:6: Set LP statement Assign expression RP
			{
			DebugLocation(279, 6);
			Set121=(CommonToken)Match(input,Set,Follow._Set_in_set1570);  
			stream_Set.Add(Set121);

			DebugLocation(279, 10);
			LP122=(CommonToken)Match(input,LP,Follow._LP_in_set1572);  
			stream_LP.Add(LP122);

			DebugLocation(279, 13);
			PushFollow(Follow._statement_in_set1574);
			statement123=statement();
			PopFollow();

			stream_statement.Add(statement123.Tree);
			DebugLocation(279, 23);
			Assign124=(CommonToken)Match(input,Assign,Follow._Assign_in_set1576);  
			stream_Assign.Add(Assign124);

			DebugLocation(279, 30);
			PushFollow(Follow._expression_in_set1578);
			expression125=expression();
			PopFollow();

			stream_expression.Add(expression125.Tree);
			DebugLocation(279, 41);
			RP126=(CommonToken)Match(input,RP,Follow._RP_in_set1580);  
			stream_RP.Add(RP126);



			{
			// AST REWRITE
			// elements: expression, statement, Set
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:44: -> ^( Set ^( Statement statement ) expression )
			{
				DebugLocation(279, 47);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:279:47: ^( Set ^( Statement statement ) expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Set.NextNode(), root_1);

				DebugLocation(279, 54);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:279:54: ^( Statement statement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 57);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_2);

				DebugLocation(279, 67);
				adaptor.AddChild(root_2, stream_statement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(279, 79);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set", 24);
			LeaveRule("set", 24);
			LeaveRule_set();
		}
		DebugLocation(279, 90);
		} finally { DebugExitRule(GrammarFileName, "set"); }
		return retval;

	}
	// $ANTLR end "set"

	partial void EnterRule_include();
	partial void LeaveRule_include();

	// $ANTLR start "include"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:1: include : Include LP ( argument_expression_list )? RP -> ^( Include ( argument_expression_list )? ) ;
	[GrammarRule("include")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> include()
	{
		EnterRule_include();
		EnterRule("include", 25);
		TraceIn("include", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Include127 = default(CommonToken);
		CommonToken LP128 = default(CommonToken);
		CommonToken RP130 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list129 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Include127_tree = default(CommonTree);
		CommonTree LP128_tree = default(CommonTree);
		CommonTree RP130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Include=new RewriteRuleITokenStream(adaptor,"token Include");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
		try { DebugEnterRule(GrammarFileName, "include");
		DebugLocation(281, 90);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:8: ( Include LP ( argument_expression_list )? RP -> ^( Include ( argument_expression_list )? ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:10: Include LP ( argument_expression_list )? RP
			{
			DebugLocation(281, 10);
			Include127=(CommonToken)Match(input,Include,Follow._Include_in_include1605);  
			stream_Include.Add(Include127);

			DebugLocation(281, 18);
			LP128=(CommonToken)Match(input,LP,Follow._LP_in_include1607);  
			stream_LP.Add(LP128);

			DebugLocation(281, 21);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:21: ( argument_expression_list )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if (((LA35_0>=EStart && LA35_0<=MStart)||(LA35_0>=EPass && LA35_0<=MPass)||LA35_0==Minus||LA35_0==LP||LA35_0==LBrace||(LA35_0>=LBracket && LA35_0<=SignedLong)||(LA35_0>=StringLiteral && LA35_0<=Decimal)||(LA35_0>=True && LA35_0<=False)||LA35_0==Null||LA35_0==Not||LA35_0==Integer||LA35_0==Plus))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:21: argument_expression_list
				{
				DebugLocation(281, 21);
				PushFollow(Follow._argument_expression_list_in_include1609);
				argument_expression_list129=argument_expression_list();
				PopFollow();

				stream_argument_expression_list.Add(argument_expression_list129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(281, 47);
			RP130=(CommonToken)Match(input,RP,Follow._RP_in_include1612);  
			stream_RP.Add(RP130);



			{
			// AST REWRITE
			// elements: argument_expression_list, Include
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 281:50: -> ^( Include ( argument_expression_list )? )
			{
				DebugLocation(281, 53);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:53: ^( Include ( argument_expression_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(281, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Include.NextNode(), root_1);

				DebugLocation(281, 64);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:281:64: ( argument_expression_list )?
				if (stream_argument_expression_list.HasNext)
				{
					DebugLocation(281, 64);
					adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

				}
				stream_argument_expression_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("include", 25);
			LeaveRule("include", 25);
			LeaveRule_include();
		}
		DebugLocation(281, 90);
		} finally { DebugExitRule(GrammarFileName, "include"); }
		return retval;

	}
	// $ANTLR end "include"

	partial void EnterRule_parse();
	partial void LeaveRule_parse();

	// $ANTLR start "parse"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:1: parse : Parse LP ( argument_expression_list )? RP -> ^( Parse ( argument_expression_list )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 26);
		TraceIn("parse", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Parse131 = default(CommonToken);
		CommonToken LP132 = default(CommonToken);
		CommonToken RP134 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Parse131_tree = default(CommonTree);
		CommonTree LP132_tree = default(CommonTree);
		CommonTree RP134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Parse=new RewriteRuleITokenStream(adaptor,"token Parse");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_argument_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule argument_expression_list");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(283, 84);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:6: ( Parse LP ( argument_expression_list )? RP -> ^( Parse ( argument_expression_list )? ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:8: Parse LP ( argument_expression_list )? RP
			{
			DebugLocation(283, 8);
			Parse131=(CommonToken)Match(input,Parse,Follow._Parse_in_parse1630);  
			stream_Parse.Add(Parse131);

			DebugLocation(283, 14);
			LP132=(CommonToken)Match(input,LP,Follow._LP_in_parse1632);  
			stream_LP.Add(LP132);

			DebugLocation(283, 17);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:17: ( argument_expression_list )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if (((LA36_0>=EStart && LA36_0<=MStart)||(LA36_0>=EPass && LA36_0<=MPass)||LA36_0==Minus||LA36_0==LP||LA36_0==LBrace||(LA36_0>=LBracket && LA36_0<=SignedLong)||(LA36_0>=StringLiteral && LA36_0<=Decimal)||(LA36_0>=True && LA36_0<=False)||LA36_0==Null||LA36_0==Not||LA36_0==Integer||LA36_0==Plus))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:17: argument_expression_list
				{
				DebugLocation(283, 17);
				PushFollow(Follow._argument_expression_list_in_parse1634);
				argument_expression_list133=argument_expression_list();
				PopFollow();

				stream_argument_expression_list.Add(argument_expression_list133.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(283, 43);
			RP134=(CommonToken)Match(input,RP,Follow._RP_in_parse1637);  
			stream_RP.Add(RP134);



			{
			// AST REWRITE
			// elements: Parse, argument_expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:46: -> ^( Parse ( argument_expression_list )? )
			{
				DebugLocation(283, 49);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:49: ^( Parse ( argument_expression_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Parse.NextNode(), root_1);

				DebugLocation(283, 58);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:283:58: ( argument_expression_list )?
				if (stream_argument_expression_list.HasNext)
				{
					DebugLocation(283, 58);
					adaptor.AddChild(root_1, stream_argument_expression_list.NextTree());

				}
				stream_argument_expression_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 26);
			LeaveRule("parse", 26);
			LeaveRule_parse();
		}
		DebugLocation(283, 84);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_assert();
	partial void LeaveRule_assert();

	// $ANTLR start "assert"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:285:1: assert : Assert LP cond= expression Comma message= expression RP -> ^( Assert $cond $message) ;
	[GrammarRule("assert")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assert()
	{
		EnterRule_assert();
		EnterRule("assert", 27);
		TraceIn("assert", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Assert135 = default(CommonToken);
		CommonToken LP136 = default(CommonToken);
		CommonToken Comma137 = default(CommonToken);
		CommonToken RP138 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> cond = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Assert135_tree = default(CommonTree);
		CommonTree LP136_tree = default(CommonTree);
		CommonTree Comma137_tree = default(CommonTree);
		CommonTree RP138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_Assert=new RewriteRuleITokenStream(adaptor,"token Assert");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "assert");
		DebugLocation(285, 91);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:285:7: ( Assert LP cond= expression Comma message= expression RP -> ^( Assert $cond $message) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:285:9: Assert LP cond= expression Comma message= expression RP
			{
			DebugLocation(285, 9);
			Assert135=(CommonToken)Match(input,Assert,Follow._Assert_in_assert1655);  
			stream_Assert.Add(Assert135);

			DebugLocation(285, 16);
			LP136=(CommonToken)Match(input,LP,Follow._LP_in_assert1657);  
			stream_LP.Add(LP136);

			DebugLocation(285, 23);
			PushFollow(Follow._expression_in_assert1661);
			cond=expression();
			PopFollow();

			stream_expression.Add(cond.Tree);
			DebugLocation(285, 35);
			Comma137=(CommonToken)Match(input,Comma,Follow._Comma_in_assert1663);  
			stream_Comma.Add(Comma137);

			DebugLocation(285, 48);
			PushFollow(Follow._expression_in_assert1667);
			message=expression();
			PopFollow();

			stream_expression.Add(message.Tree);
			DebugLocation(285, 60);
			RP138=(CommonToken)Match(input,RP,Follow._RP_in_assert1669);  
			stream_RP.Add(RP138);



			{
			// AST REWRITE
			// elements: message, Assert, cond
			// token labels: 
			// rule labels: message, retval, cond
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_message=new RewriteRuleSubtreeStream(adaptor,"rule message",message!=null?message.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:63: -> ^( Assert $cond $message)
			{
				DebugLocation(285, 66);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:285:66: ^( Assert $cond $message)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 69);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Assert.NextNode(), root_1);

				DebugLocation(285, 77);
				adaptor.AddChild(root_1, stream_cond.NextTree());
				DebugLocation(285, 83);
				adaptor.AddChild(root_1, stream_message.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assert", 27);
			LeaveRule("assert", 27);
			LeaveRule_assert();
		}
		DebugLocation(285, 91);
		} finally { DebugExitRule(GrammarFileName, "assert"); }
		return retval;

	}
	// $ANTLR end "assert"

	partial void EnterRule_pragma();
	partial void LeaveRule_pragma();

	// $ANTLR start "pragma"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:1: pragma : Pragma LP dictKey ( Comma dictKey )* RP -> ^( Pragma ( dictKey )+ ) ;
	[GrammarRule("pragma")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pragma()
	{
		EnterRule_pragma();
		EnterRule("pragma", 28);
		TraceIn("pragma", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Pragma139 = default(CommonToken);
		CommonToken LP140 = default(CommonToken);
		CommonToken Comma142 = default(CommonToken);
		CommonToken RP144 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dictKey141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> dictKey143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Pragma139_tree = default(CommonTree);
		CommonTree LP140_tree = default(CommonTree);
		CommonTree Comma142_tree = default(CommonTree);
		CommonTree RP144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_Pragma=new RewriteRuleITokenStream(adaptor,"token Pragma");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_dictKey=new RewriteRuleSubtreeStream(adaptor,"rule dictKey");
		try { DebugEnterRule(GrammarFileName, "pragma");
		DebugLocation(287, 71);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:7: ( Pragma LP dictKey ( Comma dictKey )* RP -> ^( Pragma ( dictKey )+ ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:9: Pragma LP dictKey ( Comma dictKey )* RP
			{
			DebugLocation(287, 9);
			Pragma139=(CommonToken)Match(input,Pragma,Follow._Pragma_in_pragma1690);  
			stream_Pragma.Add(Pragma139);

			DebugLocation(287, 16);
			LP140=(CommonToken)Match(input,LP,Follow._LP_in_pragma1692);  
			stream_LP.Add(LP140);

			DebugLocation(287, 19);
			PushFollow(Follow._dictKey_in_pragma1694);
			dictKey141=dictKey();
			PopFollow();

			stream_dictKey.Add(dictKey141.Tree);
			DebugLocation(287, 27);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:27: ( Comma dictKey )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==Comma))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:29: Comma dictKey
					{
					DebugLocation(287, 29);
					Comma142=(CommonToken)Match(input,Comma,Follow._Comma_in_pragma1698);  
					stream_Comma.Add(Comma142);

					DebugLocation(287, 35);
					PushFollow(Follow._dictKey_in_pragma1700);
					dictKey143=dictKey();
					PopFollow();

					stream_dictKey.Add(dictKey143.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(287, 46);
			RP144=(CommonToken)Match(input,RP,Follow._RP_in_pragma1705);  
			stream_RP.Add(RP144);



			{
			// AST REWRITE
			// elements: Pragma, dictKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:49: -> ^( Pragma ( dictKey )+ )
			{
				DebugLocation(287, 52);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:287:52: ^( Pragma ( dictKey )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Pragma.NextNode(), root_1);

				DebugLocation(287, 62);
				if (!(stream_dictKey.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_dictKey.HasNext )
				{
					DebugLocation(287, 62);
					adaptor.AddChild(root_1, stream_dictKey.NextTree());

				}
				stream_dictKey.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pragma", 28);
			LeaveRule("pragma", 28);
			LeaveRule_pragma();
		}
		DebugLocation(287, 71);
		} finally { DebugExitRule(GrammarFileName, "pragma"); }
		return retval;

	}
	// $ANTLR end "pragma"

	partial void EnterRule_loop();
	partial void LeaveRule_loop();

	// $ANTLR start "loop"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:289:1: loop : Loop LP lowerBound= expression To upperBound= expression As var= statement ( Step step= expression )? RP d= block (i+= LoopDirective b+= block )* End -> ^( Loop ^( LoopArgs $lowerBound $upperBound ^( Statement $var) ( $step)? ) ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* ) ;
	[GrammarRule("loop")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> loop()
	{
		EnterRule_loop();
		EnterRule("loop", 29);
		TraceIn("loop", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Loop145 = default(CommonToken);
		CommonToken LP146 = default(CommonToken);
		CommonToken To147 = default(CommonToken);
		CommonToken As148 = default(CommonToken);
		CommonToken Step149 = default(CommonToken);
		CommonToken RP150 = default(CommonToken);
		CommonToken End151 = default(CommonToken);
		CommonToken i = default(CommonToken);
		List<CommonToken> list_i = null;
		List<CommonTree> list_b = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> lowerBound = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> upperBound = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> var = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> step = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> d = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree Loop145_tree = default(CommonTree);
		CommonTree LP146_tree = default(CommonTree);
		CommonTree To147_tree = default(CommonTree);
		CommonTree As148_tree = default(CommonTree);
		CommonTree Step149_tree = default(CommonTree);
		CommonTree RP150_tree = default(CommonTree);
		CommonTree End151_tree = default(CommonTree);
		CommonTree i_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Step=new RewriteRuleITokenStream(adaptor,"token Step");
		RewriteRuleITokenStream stream_End=new RewriteRuleITokenStream(adaptor,"token End");
		RewriteRuleITokenStream stream_LoopDirective=new RewriteRuleITokenStream(adaptor,"token LoopDirective");
		RewriteRuleITokenStream stream_To=new RewriteRuleITokenStream(adaptor,"token To");
		RewriteRuleITokenStream stream_As=new RewriteRuleITokenStream(adaptor,"token As");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Loop=new RewriteRuleITokenStream(adaptor,"token Loop");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "loop");
		DebugLocation(289, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:290:5: ( Loop LP lowerBound= expression To upperBound= expression As var= statement ( Step step= expression )? RP d= block (i+= LoopDirective b+= block )* End -> ^( Loop ^( LoopArgs $lowerBound $upperBound ^( Statement $var) ( $step)? ) ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:290:7: Loop LP lowerBound= expression To upperBound= expression As var= statement ( Step step= expression )? RP d= block (i+= LoopDirective b+= block )* End
			{
			DebugLocation(290, 7);
			Loop145=(CommonToken)Match(input,Loop,Follow._Loop_in_loop1728);  
			stream_Loop.Add(Loop145);

			DebugLocation(290, 12);
			LP146=(CommonToken)Match(input,LP,Follow._LP_in_loop1730);  
			stream_LP.Add(LP146);

			DebugLocation(290, 25);
			PushFollow(Follow._expression_in_loop1734);
			lowerBound=expression();
			PopFollow();

			stream_expression.Add(lowerBound.Tree);
			DebugLocation(291, 9);
			To147=(CommonToken)Match(input,To,Follow._To_in_loop1744);  
			stream_To.Add(To147);

			DebugLocation(291, 22);
			PushFollow(Follow._expression_in_loop1748);
			upperBound=expression();
			PopFollow();

			stream_expression.Add(upperBound.Tree);
			DebugLocation(292, 9);
			As148=(CommonToken)Match(input,As,Follow._As_in_loop1758);  
			stream_As.Add(As148);

			DebugLocation(292, 15);
			PushFollow(Follow._statement_in_loop1762);
			var=statement();
			PopFollow();

			stream_statement.Add(var.Tree);
			DebugLocation(293, 9);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:293:9: ( Step step= expression )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Step))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:293:11: Step step= expression
				{
				DebugLocation(293, 11);
				Step149=(CommonToken)Match(input,Step,Follow._Step_in_loop1774);  
				stream_Step.Add(Step149);

				DebugLocation(293, 20);
				PushFollow(Follow._expression_in_loop1778);
				step=expression();
				PopFollow();

				stream_expression.Add(step.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(293, 35);
			RP150=(CommonToken)Match(input,RP,Follow._RP_in_loop1783);  
			stream_RP.Add(RP150);

			DebugLocation(294, 10);
			PushFollow(Follow._block_in_loop1795);
			d=block();
			PopFollow();

			stream_block.Add(d.Tree);
			DebugLocation(295, 9);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:295:9: (i+= LoopDirective b+= block )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==LoopDirective))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:295:11: i+= LoopDirective b+= block
					{
					DebugLocation(295, 12);
					i=(CommonToken)Match(input,LoopDirective,Follow._LoopDirective_in_loop1809);  
					stream_LoopDirective.Add(i);

					if (list_i==null) list_i=new List<CommonToken>();
					list_i.Add(i);

					DebugLocation(295, 29);
					PushFollow(Follow._block_in_loop1813);
					b=block();
					PopFollow();

					stream_block.Add(b.Tree);
					if (list_b==null) list_b=new List<CommonTree>();
					list_b.Add(b.Tree);


					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(296, 9);
			End151=(CommonToken)Match(input,End,Follow._End_in_loop1826);  
			stream_End.Add(End151);



			{
			// AST REWRITE
			// elements: i, var, d, lowerBound, b, upperBound, step, Loop
			// token labels: 
			// rule labels: retval, lowerBound, d, var, upperBound, step
			// token list labels: i
			// rule list labels: b
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_i=new RewriteRuleITokenStream(adaptor,"token i", list_i);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_lowerBound=new RewriteRuleSubtreeStream(adaptor,"rule lowerBound",lowerBound!=null?lowerBound.Tree:null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.Tree:null);
			RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var",var!=null?var.Tree:null);
			RewriteRuleSubtreeStream stream_upperBound=new RewriteRuleSubtreeStream(adaptor,"rule upperBound",upperBound!=null?upperBound.Tree:null);
			RewriteRuleSubtreeStream stream_step=new RewriteRuleSubtreeStream(adaptor,"rule step",step!=null?step.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
			root_0 = (CommonTree)adaptor.Nil();
			// 296:13: -> ^( Loop ^( LoopArgs $lowerBound $upperBound ^( Statement $var) ( $step)? ) ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* )
			{
				DebugLocation(296, 16);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:296:16: ^( Loop ^( LoopArgs $lowerBound $upperBound ^( Statement $var) ( $step)? ) ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Loop.NextNode(), root_1);

				DebugLocation(296, 24);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:296:24: ^( LoopArgs $lowerBound $upperBound ^( Statement $var) ( $step)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 27);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LoopArgs, "LoopArgs"), root_2);

				DebugLocation(296, 37);
				adaptor.AddChild(root_2, stream_lowerBound.NextTree());
				DebugLocation(296, 49);
				adaptor.AddChild(root_2, stream_upperBound.NextTree());
				DebugLocation(296, 60);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:296:60: ^( Statement $var)
				{
				CommonTree root_3 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 63);
				root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_3);

				DebugLocation(296, 74);
				adaptor.AddChild(root_3, stream_var.NextTree());

				adaptor.AddChild(root_2, root_3);
				}
				DebugLocation(296, 81);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:296:81: ( $step)?
				if (stream_step.HasNext)
				{
					DebugLocation(296, 81);
					adaptor.AddChild(root_2, stream_step.NextTree());

				}
				stream_step.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(297, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:297:13: ^( DefaultBlock $d)
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 16);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DefaultBlock, "DefaultBlock"), root_2);

				DebugLocation(297, 30);
				adaptor.AddChild(root_2, stream_d.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(298, 13);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:298:13: ( ^( TargetedBlock $i $b) )*
				while ( stream_i.HasNext||stream_b.HasNext )
				{
					DebugLocation(298, 13);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:298:13: ^( TargetedBlock $i $b)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 16);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TargetedBlock, "TargetedBlock"), root_2);

					DebugLocation(298, 31);
					adaptor.AddChild(root_2, stream_i.NextNode());
					DebugLocation(298, 34);
					adaptor.AddChild(root_2, stream_b.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_i.Reset();
				stream_b.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("loop", 29);
			LeaveRule("loop", 29);
			LeaveRule_loop();
		}
		DebugLocation(299, 4);
		} finally { DebugExitRule(GrammarFileName, "loop"); }
		return retval;

	}
	// $ANTLR end "loop"

	partial void EnterRule_foreach();
	partial void LeaveRule_foreach();

	// $ANTLR start "foreach"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:301:1: foreach : Foreach LP var= statement In source= expression RP d= block (i+= LoopDirective b+= block )* End -> ^( Foreach ^( Statement $var) $source ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* ) ;
	[GrammarRule("foreach")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> @foreach()
	{
		EnterRule_foreach();
		EnterRule("foreach", 30);
		TraceIn("foreach", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Foreach152 = default(CommonToken);
		CommonToken LP153 = default(CommonToken);
		CommonToken In154 = default(CommonToken);
		CommonToken RP155 = default(CommonToken);
		CommonToken End156 = default(CommonToken);
		CommonToken i = default(CommonToken);
		List<CommonToken> list_i = null;
		List<CommonTree> list_b = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> var = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> source = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> d = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree Foreach152_tree = default(CommonTree);
		CommonTree LP153_tree = default(CommonTree);
		CommonTree In154_tree = default(CommonTree);
		CommonTree RP155_tree = default(CommonTree);
		CommonTree End156_tree = default(CommonTree);
		CommonTree i_tree = default(CommonTree);
		RewriteRuleITokenStream stream_End=new RewriteRuleITokenStream(adaptor,"token End");
		RewriteRuleITokenStream stream_In=new RewriteRuleITokenStream(adaptor,"token In");
		RewriteRuleITokenStream stream_LoopDirective=new RewriteRuleITokenStream(adaptor,"token LoopDirective");
		RewriteRuleITokenStream stream_RP=new RewriteRuleITokenStream(adaptor,"token RP");
		RewriteRuleITokenStream stream_Foreach=new RewriteRuleITokenStream(adaptor,"token Foreach");
		RewriteRuleITokenStream stream_LP=new RewriteRuleITokenStream(adaptor,"token LP");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "foreach");
		DebugLocation(301, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:302:5: ( Foreach LP var= statement In source= expression RP d= block (i+= LoopDirective b+= block )* End -> ^( Foreach ^( Statement $var) $source ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:302:7: Foreach LP var= statement In source= expression RP d= block (i+= LoopDirective b+= block )* End
			{
			DebugLocation(302, 7);
			Foreach152=(CommonToken)Match(input,Foreach,Follow._Foreach_in_foreach1922);  
			stream_Foreach.Add(Foreach152);

			DebugLocation(302, 15);
			LP153=(CommonToken)Match(input,LP,Follow._LP_in_foreach1924);  
			stream_LP.Add(LP153);

			DebugLocation(302, 21);
			PushFollow(Follow._statement_in_foreach1928);
			var=statement();
			PopFollow();

			stream_statement.Add(var.Tree);
			DebugLocation(302, 32);
			In154=(CommonToken)Match(input,In,Follow._In_in_foreach1930);  
			stream_In.Add(In154);

			DebugLocation(302, 41);
			PushFollow(Follow._expression_in_foreach1934);
			source=expression();
			PopFollow();

			stream_expression.Add(source.Tree);
			DebugLocation(302, 53);
			RP155=(CommonToken)Match(input,RP,Follow._RP_in_foreach1936);  
			stream_RP.Add(RP155);

			DebugLocation(303, 10);
			PushFollow(Follow._block_in_foreach1948);
			d=block();
			PopFollow();

			stream_block.Add(d.Tree);
			DebugLocation(304, 9);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:304:9: (i+= LoopDirective b+= block )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==LoopDirective))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:304:11: i+= LoopDirective b+= block
					{
					DebugLocation(304, 12);
					i=(CommonToken)Match(input,LoopDirective,Follow._LoopDirective_in_foreach1962);  
					stream_LoopDirective.Add(i);

					if (list_i==null) list_i=new List<CommonToken>();
					list_i.Add(i);

					DebugLocation(304, 29);
					PushFollow(Follow._block_in_foreach1966);
					b=block();
					PopFollow();

					stream_block.Add(b.Tree);
					if (list_b==null) list_b=new List<CommonTree>();
					list_b.Add(b.Tree);


					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(305, 9);
			End156=(CommonToken)Match(input,End,Follow._End_in_foreach1979);  
			stream_End.Add(End156);



			{
			// AST REWRITE
			// elements: Foreach, b, source, i, d, var
			// token labels: 
			// rule labels: retval, d, source, var
			// token list labels: i
			// rule list labels: b
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_i=new RewriteRuleITokenStream(adaptor,"token i", list_i);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.Tree:null);
			RewriteRuleSubtreeStream stream_source=new RewriteRuleSubtreeStream(adaptor,"rule source",source!=null?source.Tree:null);
			RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var",var!=null?var.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
			root_0 = (CommonTree)adaptor.Nil();
			// 306:9: -> ^( Foreach ^( Statement $var) $source ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* )
			{
				DebugLocation(306, 12);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:306:12: ^( Foreach ^( Statement $var) $source ^( DefaultBlock $d) ( ^( TargetedBlock $i $b) )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 15);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_Foreach.NextNode(), root_1);

				DebugLocation(306, 23);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:306:23: ^( Statement $var)
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 26);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Statement, "Statement"), root_2);

				DebugLocation(306, 37);
				adaptor.AddChild(root_2, stream_var.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(306, 44);
				adaptor.AddChild(root_1, stream_source.NextTree());
				DebugLocation(306, 51);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:306:51: ^( DefaultBlock $d)
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 54);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DefaultBlock, "DefaultBlock"), root_2);

				DebugLocation(306, 68);
				adaptor.AddChild(root_2, stream_d.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(306, 72);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:306:72: ( ^( TargetedBlock $i $b) )*
				while ( stream_b.HasNext||stream_i.HasNext )
				{
					DebugLocation(306, 72);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:306:72: ^( TargetedBlock $i $b)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(306, 75);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TargetedBlock, "TargetedBlock"), root_2);

					DebugLocation(306, 90);
					adaptor.AddChild(root_2, stream_i.NextNode());
					DebugLocation(306, 93);
					adaptor.AddChild(root_2, stream_b.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_b.Reset();
				stream_i.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreach", 30);
			LeaveRule("foreach", 30);
			LeaveRule_foreach();
		}
		DebugLocation(307, 4);
		} finally { DebugExitRule(GrammarFileName, "foreach"); }
		return retval;

	}
	// $ANTLR end "foreach"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:309:1: argument_expression_list : expression ( Comma expression )* -> ^( FnArgs ( expression )+ ) ;
	[GrammarRule("argument_expression_list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 31);
		TraceIn("argument_expression_list", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Comma158 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression157 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Comma158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(309, 4);
		try
		{
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:310:5: ( expression ( Comma expression )* -> ^( FnArgs ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:310:7: expression ( Comma expression )*
			{
			DebugLocation(310, 7);
			PushFollow(Follow._expression_in_argument_expression_list2046);
			expression157=expression();
			PopFollow();

			stream_expression.Add(expression157.Tree);
			DebugLocation(310, 18);
			// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:310:18: ( Comma expression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==Comma))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:310:20: Comma expression
					{
					DebugLocation(310, 20);
					Comma158=(CommonToken)Match(input,Comma,Follow._Comma_in_argument_expression_list2050);  
					stream_Comma.Add(Comma158);

					DebugLocation(310, 26);
					PushFollow(Follow._expression_in_argument_expression_list2052);
					expression159=expression();
					PopFollow();

					stream_expression.Add(expression159.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 310:40: -> ^( FnArgs ( expression )+ )
			{
				DebugLocation(310, 43);
				// C:\\Projects\\FastTemplate\\etc\\grammar\\TemplateParser.g:310:43: ^( FnArgs ( expression )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(310, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FnArgs, "FnArgs"), root_1);

				DebugLocation(310, 53);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(310, 53);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 31);
			LeaveRule("argument_expression_list", 31);
			LeaveRule_argument_expression_list();
		}
		DebugLocation(311, 4);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _section_in_document226 = new BitSet(new ulong[]{0x1801F28000000370UL,0x19UL});
		public static readonly BitSet _EOF_in_document229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _section_in_block247 = new BitSet(new ulong[]{0x1801F28000000372UL,0x19UL});
		public static readonly BitSet _statement_in_section271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _passthrough_in_section289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Literal_in_section307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Unparsed_in_section319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _control_in_section331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EStart_in_statement358 = new BitSet(new ulong[]{0x4000004000000UL});
		public static readonly BitSet _LBrace_in_statement362 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _Root_in_statement364 = new BitSet(new ulong[]{0x13000080UL});
		public static readonly BitSet _sSection_in_statement366 = new BitSet(new ulong[]{0x13000080UL});
		public static readonly BitSet _RBrace_in_statement369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Root_in_statement373 = new BitSet(new ulong[]{0x11000082UL});
		public static readonly BitSet _sSection_in_statement375 = new BitSet(new ulong[]{0x11000082UL});
		public static readonly BitSet _MStart_in_statement399 = new BitSet(new ulong[]{0x4000004000000UL});
		public static readonly BitSet _LBrace_in_statement403 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _Root_in_statement405 = new BitSet(new ulong[]{0x13000080UL});
		public static readonly BitSet _sSection_in_statement407 = new BitSet(new ulong[]{0x13000080UL});
		public static readonly BitSet _RBrace_in_statement410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Root_in_statement414 = new BitSet(new ulong[]{0x11000082UL});
		public static readonly BitSet _sSection_in_statement416 = new BitSet(new ulong[]{0x11000082UL});
		public static readonly BitSet _EPass_in_passthrough449 = new BitSet(new ulong[]{0x2430003F35880360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_passthrough451 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_passthrough454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MPass_in_passthrough473 = new BitSet(new ulong[]{0x2430003F35880360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_passthrough475 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_passthrough478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Prop_in_sSection506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LP_in_sSection518 = new BitSet(new ulong[]{0x2430003F35880360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_sSection520 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_sSection523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBracket_in_sSection542 = new BitSet(new ulong[]{0x2430003F3D080360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_sSection544 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _RBracket_in_sSection547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _loop_in_control575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assert_in_control583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pragma_in_control591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreach_in_control599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_control607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _include_in_control615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parse_in_control623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_in_control631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stop_in_control639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_control647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_control655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_constant672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SignedLong_in_constant680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_constant688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnsignedInteger_in_constant696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Double_in_constant704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Decimal_in_constant712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Hex_in_constant720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _True_in_constant728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _False_in_constant736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Null_in_constant744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_in_constant752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_in_constant770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dictKey_in_tuple795 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _Assign_in_tuple797 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_tuple799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBrace_in_dict842 = new BitSet(new ulong[]{0x2000102000000UL});
		public static readonly BitSet _RBrace_in_dict846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tuple_in_dict862 = new BitSet(new ulong[]{0x4002000000UL});
		public static readonly BitSet _Comma_in_dict866 = new BitSet(new ulong[]{0x2000100000000UL});
		public static readonly BitSet _tuple_in_dict868 = new BitSet(new ulong[]{0x4002000000UL});
		public static readonly BitSet _RBrace_in_dict873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBracket_in_list897 = new BitSet(new ulong[]{0x2430003F3D080360UL,0x100004UL});
		public static readonly BitSet _RBracket_in_list901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_list917 = new BitSet(new ulong[]{0x4008000000UL});
		public static readonly BitSet _Comma_in_list921 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_list923 = new BitSet(new ulong[]{0x4008000000UL});
		public static readonly BitSet _RBracket_in_list928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DynamicString_in_dynamicString952 = new BitSet(new ulong[]{0x200000370UL});
		public static readonly BitSet _dynamicStringSection_in_dynamicString954 = new BitSet(new ulong[]{0x200000370UL});
		public static readonly BitSet _DynamicString_in_dynamicString957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Literal_in_dynamicStringSection987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_dynamicStringSection999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _passthrough_in_dynamicStringSection1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_expression1041 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _OR_in_expression1045 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _logical_and_expression_in_expression1048 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _equality_expression_in_logical_and_expression1062 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _AND_in_logical_and_expression1066 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _equality_expression_in_logical_and_expression1069 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1083 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _set_in_equality_expression1087 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _relational_expression_in_equality_expression1098 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _additive_expression_in_relational_expression1112 = new BitSet(new ulong[]{0xF002UL});
		public static readonly BitSet _set_in_relational_expression1116 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _additive_expression_in_relational_expression1135 = new BitSet(new ulong[]{0xF002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1149 = new BitSet(new ulong[]{0xC0002UL});
		public static readonly BitSet _set_in_additive_expression1153 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1164 = new BitSet(new ulong[]{0xC0002UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression1178 = new BitSet(new ulong[]{0x700002UL});
		public static readonly BitSet _set_in_multiplicative_expression1182 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression1197 = new BitSet(new ulong[]{0x700002UL});
		public static readonly BitSet _primary_expression_in_unary_expression1211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Plus_in_unary_expression1220 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _unary_expression_in_unary_expression1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Minus_in_unary_expression1242 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _unary_expression_in_unary_expression1244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Not_in_unary_expression1264 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _unary_expression_in_unary_expression1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_primary_expression1292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _passthrough_in_primary_expression1310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dynamicString_in_primary_expression1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LP_in_primary_expression1361 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_primary_expression1363 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_primary_expression1365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_if1389 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_if1391 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_if1395 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_if1397 = new BitSet(new ulong[]{0x1809FE8000000370UL,0x19UL});
		public static readonly BitSet _block_in_if1409 = new BitSet(new ulong[]{0x80C0000000000UL});
		public static readonly BitSet _ElseIf_in_if1421 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_if1423 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_if1427 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_if1429 = new BitSet(new ulong[]{0x1809FE8000000370UL,0x19UL});
		public static readonly BitSet _block_in_if1445 = new BitSet(new ulong[]{0x80C0000000000UL});
		public static readonly BitSet _Else_in_if1460 = new BitSet(new ulong[]{0x1809F28000000370UL,0x19UL});
		public static readonly BitSet _block_in_if1476 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _End_in_if1489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Set_in_set1570 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_set1572 = new BitSet(new ulong[]{0x60UL});
		public static readonly BitSet _statement_in_set1574 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _Assign_in_set1576 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_set1578 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_set1580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Include_in_include1605 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_include1607 = new BitSet(new ulong[]{0x2430003F35880360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_include1609 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_include1612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Parse_in_parse1630 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_parse1632 = new BitSet(new ulong[]{0x2430003F35880360UL,0x100004UL});
		public static readonly BitSet _argument_expression_list_in_parse1634 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_parse1637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Assert_in_assert1655 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_assert1657 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_assert1661 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _Comma_in_assert1663 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_assert1667 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_assert1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Pragma_in_pragma1690 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_pragma1692 = new BitSet(new ulong[]{0x2000100000000UL});
		public static readonly BitSet _dictKey_in_pragma1694 = new BitSet(new ulong[]{0x4000800000UL});
		public static readonly BitSet _Comma_in_pragma1698 = new BitSet(new ulong[]{0x2000100000000UL});
		public static readonly BitSet _dictKey_in_pragma1700 = new BitSet(new ulong[]{0x4000800000UL});
		public static readonly BitSet _RP_in_pragma1705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Loop_in_loop1728 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_loop1730 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_loop1734 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _To_in_loop1744 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_loop1748 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _As_in_loop1758 = new BitSet(new ulong[]{0x60UL});
		public static readonly BitSet _statement_in_loop1762 = new BitSet(new ulong[]{0x100000000800000UL});
		public static readonly BitSet _Step_in_loop1774 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_loop1778 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_loop1783 = new BitSet(new ulong[]{0x1809F38000000370UL,0x19UL});
		public static readonly BitSet _block_in_loop1795 = new BitSet(new ulong[]{0x8010000000000UL});
		public static readonly BitSet _LoopDirective_in_loop1809 = new BitSet(new ulong[]{0x1809F38000000370UL,0x19UL});
		public static readonly BitSet _block_in_loop1813 = new BitSet(new ulong[]{0x8010000000000UL});
		public static readonly BitSet _End_in_loop1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_foreach1922 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _LP_in_foreach1924 = new BitSet(new ulong[]{0x60UL});
		public static readonly BitSet _statement_in_foreach1928 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _In_in_foreach1930 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_foreach1934 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _RP_in_foreach1936 = new BitSet(new ulong[]{0x1809F38000000370UL,0x19UL});
		public static readonly BitSet _block_in_foreach1948 = new BitSet(new ulong[]{0x8010000000000UL});
		public static readonly BitSet _LoopDirective_in_foreach1962 = new BitSet(new ulong[]{0x1809F38000000370UL,0x19UL});
		public static readonly BitSet _block_in_foreach1966 = new BitSet(new ulong[]{0x8010000000000UL});
		public static readonly BitSet _End_in_foreach1979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_expression_list2046 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _Comma_in_argument_expression_list2050 = new BitSet(new ulong[]{0x2430003F35080360UL,0x100004UL});
		public static readonly BitSet _expression_in_argument_expression_list2052 = new BitSet(new ulong[]{0x4000000002UL});
	}
	#endregion Follow sets
}

} // namespace  PaniciSoftware.FastTemplate.Common 
